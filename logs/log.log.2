[2019-07-18 14:03:58.965] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true, attributes: [Array] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function],
      attributes: [Array]
    }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ],
    'archivedFlag',
    'billDate',
    'billNumber',
    'blockNumber',
    'cbsWarrantyFlag',
    'checkedFlag',
    'commonFieldString',
    'date',
    'description',
    'detailsHash',
    'diagPrice',
    'failDescription',
    'frozenFlag',
    'hash',
    'id',
    'invoiceDate',
    'number',
    'numberFromCustomer',
    'onceFlag',
    'paidFlag',
    'parentId',
    'partName',
    'partNumber',
    'reasonDescription',
    'repairPrice',
    'retryFlag',
    'serialNumber',
    'subcontractorFlag',
    'warrantyFlag',
    'ownerId'
  ],
  where: { id: { '$in': [Array] } }
}
[2019-07-18 14:03:59.064] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.064] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`archived` AS `archivedFlag`, `ticket`.`billdate` AS `billDate`, `ticket`.`billnumber` AS `billNumber`, `ticket`.`blocknumber` AS `blockNumber`, `ticket`.`cbswarranty` AS `cbsWarrantyFlag`, `ticket`.`checked` AS `checkedFlag`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`orderdate` AS `date`, `ticket`.`description`, `ticket`.`details_hash` AS `detailsHash`, `ticket`.`diagnostics` AS `diagPrice`, `ticket`.`fail_description` AS `failDescription`, `ticket`.`frozen` AS `frozenFlag`, `ticket`.`hash`, `ticket`.`id`, `ticket`.`invoicedate` AS `invoiceDate`, `ticket`.`ordernumber` AS `number`, `ticket`.`onbycustomer` AS `numberFromCustomer`, `ticket`.`once` AS `onceFlag`, `ticket`.`paid_by_customer` AS `paidFlag`, `ticket`.`parentorderid` AS `parentId`, `ticket`.`partname` AS `partName`, `ticket`.`partnumber` AS `partNumber`, `ticket`.`reason_description` AS `reasonDescription`, `ticket`.`price` AS `repairPrice`, `ticket`.`retry` AS `retryFlag`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`subcontractor` AS `subcontractorFlag`, `ticket`.`warranty` AS `warrantyFlag`, `ticket`.`ownerid` AS `ownerId`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `city`.`id` AS `city.id`, `city`.`name` AS `city.name`, `city`.`code` AS `city.code`, `equipment`.`id` AS `equipment.id`, `equipment`.`customerid` AS `equipment.customerId`, `equipment`.`cityid` AS `equipment.cityId`, `equipment`.`typemodelid` AS `equipment.typeId`, `equipment`.`service_contract_id` AS `equipment.contractId`, `equipment`.`place` AS `equipment.location`, `equipment`.`regnumber` AS `equipment.regNumber`, `equipment`.`serialnumber` AS `equipment.serialNumber`, `equipment`.`endcbswarrantydate` AS `equipment.endCBSWarrantyDate`, `equipment`.`endwarrantydate` AS `equipment.endWarrantyDate`, `equipment`.`bna` AS `equipment.bnaFlag`, `equipment`.`archived` AS `equipment.archivedFlag`, `equipment`.`update_time` AS `equipment.updateTime`, `equipment`.`cityid` AS `equipment.cityid`, `equipment`.`typemodelid` AS `equipment.typemodelid`, `equipment`.`customerid` AS `equipment.customerid`, `equipment`.`service_contract_id` AS `equipment.service_contract_id`, `equipment->equipmentType`.`id` AS `equipment.equipmentType.id`, `equipment->equipmentType`.`vendorid` AS `equipment.equipmentType.vendorId`, `equipment->equipmentType`.`typemodel` AS `equipment.equipmentType.model`, `equipment->equipmentType`.`name` AS `equipment.equipmentType.name`, `equipment->equipmentType`.`vendorid` AS `equipment.equipmentType.vendorid`, `customer`.`id` AS `customer.id`, `customer`.`customertypeid` AS `customer.typeId`, `customer`.`city_id` AS `customer.cityId`, `customer`.`cbs_user_id` AS `customer.userId`, `customer`.`name` AS `customer.name`, `customer`.`address` AS `customer.address`, `customer`.`rnn` AS `customer.rnn`, `customer`.`bik` AS `customer.bik`, `customer`.`rs` AS `customer.rs`, `customer`.`bank` AS `customer.bank`, `customer`.`seller` AS `customer.sellerFlag`, `customer`.`active` AS `customer.active`, `customerPerson`.`id` AS `customerPerson.id`, `customerPerson`.`customerid` AS `customerPerson.customerId`, `customerPerson`.`cityid` AS `customerPerson.cityId`, `customerPerson`.`name` AS `customerPerson.name`, `customerPerson`.`post` AS `customerPerson.post`, `customerPerson`.`address` AS `customerPerson.address`, `customerPerson`.`phones` AS `customerPerson.phone`, `customerPerson`.`email` AS `customerPerson.email`, `customerPerson`.`iin` AS `customerPerson.iin`, `customerPerson`.`id_card_number` AS `customerPerson.cardNumber`, `customerPerson`.`id_card_date` AS `customerPerson.cardDate`, `customerPerson`.`spam_accepted` AS `customerPerson.dispatch`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name`, `vendor`.`id` AS `vendor.id`, `vendor`.`name` AS `vendor.name`, `vendor`.`appendix` AS `vendor.appendix`, `vendor`.`inner_vendor` AS `vendor.innerFlag`, `seller`.`id` AS `seller.id`, `seller`.`customertypeid` AS `seller.typeId`, `seller`.`city_id` AS `seller.cityId`, `seller`.`cbs_user_id` AS `seller.userId`, `seller`.`name` AS `seller.name`, `seller`.`address` AS `seller.address`, `seller`.`rnn` AS `seller.rnn`, `seller`.`bik` AS `seller.bik`, `seller`.`rs` AS `seller.rs`, `seller`.`bank` AS `seller.bank`, `seller`.`seller` AS `seller.sellerFlag`, `seller`.`active` AS `seller.active`, `sellerPerson`.`id` AS `sellerPerson.id`, `sellerPerson`.`customerid` AS `sellerPerson.customerId`, `sellerPerson`.`cityid` AS `sellerPerson.cityId`, `sellerPerson`.`name` AS `sellerPerson.name`, `sellerPerson`.`post` AS `sellerPerson.post`, `sellerPerson`.`address` AS `sellerPerson.address`, `sellerPerson`.`phones` AS `sellerPerson.phone`, `sellerPerson`.`email` AS `sellerPerson.email`, `sellerPerson`.`iin` AS `sellerPerson.iin`, `sellerPerson`.`id_card_number` AS `sellerPerson.cardNumber`, `sellerPerson`.`id_card_date` AS `sellerPerson.cardDate`, `sellerPerson`.`spam_accepted` AS `sellerPerson.dispatch`, `contract`.`id` AS `contract.id`, `contract`.`contracttypeid` AS `contract.typeId`, `contract`.`customerid` AS `contract.customerId`, `contract`.`name` AS `contract.name`, `contract`.`startdate` AS `contract.startDate`, `contract`.`enddate` AS `contract.endDate`, `contract`.`customerid` AS `contract.customerid`, `reason`.`id` AS `reason.id`, `reason`.`name` AS `reason.name`, `reason`.`parent_id` AS `reason.parentId`, `reason`.`vendor_id` AS `reason.vendorId`, `timeout`.`order_id` AS `timeout.ticketId`, `timeout`.`timeout` AS `timeout.timeout`, `timeout`.`reason_id` AS `timeout.reasonId`, `timeout->timeoutReason`.`id` AS `timeout.timeoutReason.id`, `timeout->timeoutReason`.`name` AS `timeout.timeoutReason.name` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` LEFT OUTER JOIN `city` AS `city` ON `ticket`.`cityid` = `city`.`id` LEFT OUTER JOIN `equipment` AS `equipment` ON `ticket`.`equipmentid` = `equipment`.`id` LEFT OUTER JOIN `equipmenttypes` AS `equipment->equipmentType` ON `equipment`.`typemodelid` = `equipment->equipmentType`.`id` LEFT OUTER JOIN `customers` AS `customer` ON `ticket`.`customerid` = `customer`.`id` LEFT OUTER JOIN `contacts` AS `customerPerson` ON `ticket`.`cpersonid` = `customerPerson`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticket`.`servicetypeid` = `serviceType`.`id` LEFT OUTER JOIN `vendors` AS `vendor` ON `ticket`.`vendorid` = `vendor`.`id` LEFT OUTER JOIN `customers` AS `seller` ON `ticket`.`seller_id` = `seller`.`id` LEFT OUTER JOIN `contacts` AS `sellerPerson` ON `ticket`.`seller_cperson_id` = `sellerPerson`.`id` LEFT OUTER JOIN `contract` AS `contract` ON `ticket`.`contractid` = `contract`.`id` LEFT OUTER JOIN `reasons` AS `reason` ON `ticket`.`reason_id` = `reason`.`id` LEFT OUTER JOIN `order_timeout` AS `timeout` ON `ticket`.`id` = `timeout`.`order_id` AND `timeout`.`active` = 1 LEFT OUTER JOIN `order_timeout_reason` AS `timeout->timeoutReason` ON `timeout`.`reason_id` = `timeout->timeoutReason`.`id` WHERE `ticket`.`id` IN (497026); 53ms
[2019-07-18 14:03:59.078] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497026
[2019-07-18 14:03:59.084] [Level { level: 20000, levelStr: 'INFO' }] [default] - getNextStatus - 
[2019-07-18 14:03:59.084] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - tickets:  [
  {
    description: null,
    'perm--serviceType': 1,
    'perm--setPerformer': 1,
    'perm--comment': 1,
    'perm--status': 1,
    'perm--partOrder--needPart--addition': 0,
    'perm--partOrder--generalPart--addition': 0,
    'perm--partOrder--generalPart--editing': 0,
    'perm--instPart--addition': 0,
    archivedFlag: 0,
    billDate: null,
    billNumber: null,
    blockNumber: null,
    cbsWarrantyFlag: null,
    checkedFlag: null,
    commonFieldString: null,
    date: '2018-05-14',
    detailsHash: '11518272',
    diagPrice: null,
    failDescription: null,
    frozenFlag: 0,
    hash: '51c4238e5562d6057402a1a125e844bd',
    id: 497026,
    invoiceDate: null,
    number: 'CMT16Q',
    numberFromCustomer: null,
    onceFlag: null,
    paidFlag: 0,
    parentId: 495497,
    partName: null,
    partNumber: null,
    reasonDescription: null,
    repairPrice: null,
    retryFlag: 0,
    serialNumber: null,
    subcontractorFlag: 0,
    warrantyFlag: null,
    ownerId: 230,
    status: { id: 3, name: 'Назначен исполнитель' },
    city: { id: 12, name: 'Актобе', code: 'aqtobe' },
    equipment: null,
    customer: {
      id: 538,
      typeId: 1,
      cityId: null,
      userId: null,
      name: 'Bank Home Credit SB JSC',
      address: '050059, Almaty, Kazakhstan, Furmanov str., 248',
      rnn: '',
      bik: '',
      rs: '',
      bank: '',
      sellerFlag: 0,
      active: 1
    },
    customerPerson: null,
    serviceType: { id: 9, name: 'Поставка запчастей' },
    vendor: { id: 13, name: 'CMT', appendix: 'CMT', innerFlag: 0 },
    seller: null,
    sellerPerson: null,
    contract: null,
    reason: null,
    timeout: null
  }
]
[2019-07-18 14:03:59.092] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:59.098] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.098] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497026' ORDER BY `ticketHistory`.`statustime` ASC; 15ms
[2019-07-18 14:03:59.100] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.100] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 4ms
[2019-07-18 14:03:59.107] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497026 200 29ms 912b
[2019-07-18 14:03:59.110] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:59.111] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRoleId
[2019-07-18 14:03:59.127] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.128] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT 
    id
FROM groups 
WHERE 
    weight = 7
LIMIT 1; 14ms
[2019-07-18 14:03:59.130] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - roleId: 1
[2019-07-18 14:03:59.146] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.146] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT 
    o.id as `ticketId`,
    s.id, 
    s.name 
FROM orders o
INNER JOIN ticket_next_status ns ON o.statusid = ns.current_id 
INNER JOIN role_status rs ON rs.status_id = ns.next_id
INNER JOIN `status` s ON ns.next_id = s.id
WHERE
    rs.role_id = 1
    AND ns.ticket_type_id = o.ordertypeid
    AND o.id IN (497026)
; 6ms
[2019-07-18 14:03:59.148] [Level { level: 20000, levelStr: 'INFO' }] [default] - getCustomerContact - 
[2019-07-18 14:03:59.195] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.200] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `contacts`.`id`, `contacts`.`customerid` AS `customerId`, `contacts`.`cityid` AS `cityId`, `contacts`.`name`, `contacts`.`post`, `contacts`.`address`, `contacts`.`phones` AS `phone`, `contacts`.`email`, `contacts`.`iin`, `contacts`.`id_card_number` AS `cardNumber`, `contacts`.`id_card_date` AS `cardDate`, `contacts`.`spam_accepted` AS `dispatch` FROM `contacts` AS `contacts` INNER JOIN `orders` AS `ticket` ON `contacts`.`customerid` = `ticket`.`customerid` AND `ticket`.`id` = 497026 LIMIT 1; 28ms
[2019-07-18 14:03:59.210] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets?fields=%7B%22ticket%22%3A%5B%22archivedFlag%22%2C%22billDate%22%2C%22billNumber%22%2C%22blockNumber%22%2C%22cbsWarrantyFlag%22%2C%22checkedFlag%22%2C%22commonFieldString%22%2C%22date%22%2C%22description%22%2C%22detailsHash%22%2C%22diagPrice%22%2C%22failDescription%22%2C%22frozenFlag%22%2C%22hash%22%2C%22id%22%2C%22invoiceDate%22%2C%22number%22%2C%22numberFromCustomer%22%2C%22onceFlag%22%2C%22paidFlag%22%2C%22parentId%22%2C%22partName%22%2C%22partNumber%22%2C%22reasonDescription%22%2C%22repairPrice%22%2C%22retryFlag%22%2C%22serialNumber%22%2C%22subcontractorFlag%22%2C%22warrantyFlag%22%2C%22ownerId%22%5D%2C%22city%22%3A%5B%5D%2C%22contract%22%3A%5B%5D%2C%22customer%22%3A%5B%5D%2C%22customerContact%22%3A%5B%5D%2C%22customerPerson%22%3A%5B%5D%2C%22equipSupplier%22%3A%5B%5D%2C%22reason%22%3A%5B%5D%2C%22seller%22%3A%5B%5D%2C%22sellerPerson%22%3A%5B%5D%2C%22serviceType%22%3A%5B%5D%2C%22vendor%22%3A%5B%5D%2C%22status%22%3A%5B%22id%22%2C%22name%22%2C%7B%22next%22%3A%5B%5D%7D%5D%2C%22equipment%22%3A%5B%5D%2C%22equipmentType%22%3A%5B%5D%2C%22timeout%22%3A%5B%22timeout%22%2C%22reasonId%22%5D%2C%22timeoutReason%22%3A%5B%5D%7D&filters=%7B%22ticket%22%3A%7B%22id%22%3A%22497026%22%7D%7D&userId=1 200 397ms 2.48kb
[2019-07-18 14:03:59.221] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497026?userId=1
[2019-07-18 14:03:59.240] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:59.268] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.273] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497026') AS `id`; 26ms
[2019-07-18 14:03:59.276] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:59.298] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:59.305] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.306] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 4ms
[2019-07-18 14:03:59.307] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:59.324] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.325] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '495497'; 12ms
[2019-07-18 14:03:59.326] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:59.327] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 0,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 495497,
  number: 'CMT1083M',
  typeId: 1,
  statusId: 4,
  vendorId: 13,
  date: '2018-05-05',
  customerId: 538,
  serviceTypeId: 5,
  performerId: 230,
  commonFieldString: null,
  cityId: 12,
  serialNumber: null,
  equipmentId: 25690
}
[2019-07-18 14:03:59.329] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:59.329] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 0,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 495497,
  number: 'CMT1083M',
  typeId: 1,
  statusId: 4,
  vendorId: 13,
  date: '2018-05-05',
  customerId: 538,
  serviceTypeId: 5,
  performerId: 230,
  commonFieldString: null,
  cityId: 12,
  serialNumber: null,
  equipmentId: 25690
}
[2019-07-18 14:03:59.341] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.342] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 495497; 6ms
[2019-07-18 14:03:59.343] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:59.344] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [
  {
    id: 497026,
    number: 'CMT16Q',
    typeId: 5,
    statusId: 3,
    vendorId: 13,
    date: '2018-05-14',
    customerId: 538,
    serviceTypeId: 9,
    performerId: 145,
    commonFieldString: null,
    cityId: 12,
    serialNumber: null,
    equipmentId: null,
    perm: {
      serviceType: 1,
      setPerformer: 1,
      comment: 1,
      status: 1,
      partOrder: [Object],
      instPart: [Object]
    }
  }
]
[2019-07-18 14:03:59.345] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:59.345] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  id: 497026,
  number: 'CMT16Q',
  typeId: 5,
  statusId: 3,
  vendorId: 13,
  date: '2018-05-14',
  customerId: 538,
  serviceTypeId: 9,
  performerId: 145,
  commonFieldString: null,
  cityId: 12,
  serialNumber: null,
  equipmentId: null,
  perm: {
    serviceType: 1,
    setPerformer: 1,
    comment: 1,
    status: 1,
    partOrder: { needPart: [Object], generalPart: [Object] },
    instPart: { addition: 0 }
  }
}
[2019-07-18 14:03:59.351] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:59.353] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497026; 3ms
[2019-07-18 14:03:59.357] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497026?userId=1 200 136ms 1.28kb
[2019-07-18 14:04:06.801] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497029&userId=1
[2019-07-18 14:04:06.803] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:04:06.805] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:06.806] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:04:06.807] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:04:06.817] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:06.818] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497029'; 2ms
[2019-07-18 14:04:06.819] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497029&userId=1 200 18ms 292b
[2019-07-18 14:04:06.861] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497029
[2019-07-18 14:04:06.871] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:06.874] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497029' ORDER BY `ticketHistory`.`statustime` ASC; 4ms
[2019-07-18 14:04:06.878] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497029 200 16ms 1.28kb
[2019-07-18 14:04:06.914] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497029?userId=1
[2019-07-18 14:04:06.915] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:04:06.917] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:06.918] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497029') AS `id`; 1ms
[2019-07-18 14:04:06.919] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:04:06.920] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:04:06.922] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:06.923] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:04:06.941] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:04:06.944] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:06.945] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497029'; 1ms
[2019-07-18 14:04:06.946] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:04:06.946] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497029,
  number: 'D21845M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 26,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 5701
}
[2019-07-18 14:04:06.947] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:04:06.947] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497029,
  number: 'D21845M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 26,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 5701
}
[2019-07-18 14:04:06.954] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:06.954] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497029; 4ms
[2019-07-18 14:04:06.955] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497029?userId=1 200 41ms 578b
[2019-07-18 14:04:08.675] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497029&userId=1
[2019-07-18 14:04:08.676] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:04:08.679] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:08.680] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:04:08.681] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:04:08.714] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:08.715] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497029'; 3ms
[2019-07-18 14:04:08.717] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497029&userId=1 200 42ms 292b
[2019-07-18 14:04:08.802] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497029
[2019-07-18 14:04:08.816] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:08.819] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497029' ORDER BY `ticketHistory`.`statustime` ASC; 2ms
[2019-07-18 14:04:08.824] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497029 200 22ms 1.28kb
[2019-07-18 14:04:08.897] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497029?userId=1
[2019-07-18 14:04:08.898] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:04:08.900] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:08.900] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497029') AS `id`; 1ms
[2019-07-18 14:04:08.901] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:04:08.901] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:04:08.905] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:08.906] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 3ms
[2019-07-18 14:04:08.907] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:04:08.916] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:08.920] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497029'; 3ms
[2019-07-18 14:04:08.922] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:04:08.922] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497029,
  number: 'D21845M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 26,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 5701
}
[2019-07-18 14:04:08.938] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:04:08.938] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497029,
  number: 'D21845M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 26,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 5701
}
[2019-07-18 14:04:08.944] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:08.945] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497029; 2ms
[2019-07-18 14:04:08.947] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497029?userId=1 200 50ms 578b
[2019-07-18 14:04:10.215] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497030&userId=1
[2019-07-18 14:04:10.216] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:04:10.219] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.220] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 14:04:10.221] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:04:10.255] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.256] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497030'; 4ms
[2019-07-18 14:04:10.259] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497030&userId=1 200 44ms 292b
[2019-07-18 14:04:10.278] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets?fields=%7B%22ticket%22%3A%5B%22archivedFlag%22%2C%22billDate%22%2C%22billNumber%22%2C%22blockNumber%22%2C%22cbsWarrantyFlag%22%2C%22checkedFlag%22%2C%22commonFieldString%22%2C%22date%22%2C%22description%22%2C%22detailsHash%22%2C%22diagPrice%22%2C%22failDescription%22%2C%22frozenFlag%22%2C%22hash%22%2C%22id%22%2C%22invoiceDate%22%2C%22number%22%2C%22numberFromCustomer%22%2C%22onceFlag%22%2C%22paidFlag%22%2C%22parentId%22%2C%22partName%22%2C%22partNumber%22%2C%22reasonDescription%22%2C%22repairPrice%22%2C%22retryFlag%22%2C%22serialNumber%22%2C%22subcontractorFlag%22%2C%22warrantyFlag%22%2C%22ownerId%22%5D%2C%22city%22%3A%5B%5D%2C%22contract%22%3A%5B%5D%2C%22customer%22%3A%5B%5D%2C%22customerContact%22%3A%5B%5D%2C%22customerPerson%22%3A%5B%5D%2C%22equipSupplier%22%3A%5B%5D%2C%22reason%22%3A%5B%5D%2C%22seller%22%3A%5B%5D%2C%22sellerPerson%22%3A%5B%5D%2C%22serviceType%22%3A%5B%5D%2C%22vendor%22%3A%5B%5D%2C%22status%22%3A%5B%22id%22%2C%22name%22%2C%7B%22next%22%3A%5B%5D%7D%5D%2C%22equipment%22%3A%5B%5D%2C%22equipmentType%22%3A%5B%5D%2C%22timeout%22%3A%5B%22timeout%22%2C%22reasonId%22%5D%2C%22timeoutReason%22%3A%5B%5D%7D&filters=%7B%22ticket%22%3A%7B%22id%22%3A%22497030%22%7D%7D&userId=1
[2019-07-18 14:04:10.279] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:04:10.279] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:04:10.281] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.281] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 0ms
[2019-07-18 14:04:10.282] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:04:10.282] [Level { level: 20000, levelStr: 'INFO' }] [default] - getAll_DualSearch
[2019-07-18 14:04:10.282] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true },
    { as: 'performer', model: [Function] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { attributes: [], model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] },
    { include: [Array], separate: true, model: [Function] },
    {
      include: [Array],
      as: 'history',
      separate: true,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ]
  ]
}
[2019-07-18 14:04:10.296] [Level { level: 20000, levelStr: 'INFO' }] [default] - getSearch...
[2019-07-18 14:04:10.314] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [Object: null prototype] {
  fields: '{"ticket":["archivedFlag","billDate","billNumber","blockNumber","cbsWarrantyFlag","checkedFlag","commonFieldString","date","description","detailsHash","diagPrice","failDescription","frozenFlag","hash","id","invoiceDate","number","numberFromCustomer","onceFlag","paidFlag","parentId","partName","partNumber","reasonDescription","repairPrice","retryFlag","serialNumber","subcontractorFlag","warrantyFlag","ownerId"],"city":[],"contract":[],"customer":[],"customerContact":[],"customerPerson":[],"equipSupplier":[],"reason":[],"seller":[],"sellerPerson":[],"serviceType":[],"vendor":[],"status":["id","name",{"next":[]}],"equipment":[],"equipmentType":[],"timeout":["timeout","reasonId"],"timeoutReason":[]}',
  filters: '{"ticket":{"id":"497030"}}',
  userId: '1'
}
[2019-07-18 14:04:10.316] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - fastSearch:  {
  filters: { models: [ 'ticket' ], ticket: { id: '497030' } },
  fields: {
    models: [
               'ticket',            'city',
             'contract',        'customer',
      'customerContact',  'customerPerson',
        'equipSupplier',          'reason',
               'seller',    'sellerPerson',
          'serviceType',          'vendor',
                 'next',          'status',
            'equipment',   'equipmentType',
              'timeout',   'timeoutReason'
    ],
    timeoutReason: [],
    timeout: [ 'timeout', 'reasonId' ],
    equipmentType: [],
    equipment: [],
    status: [ 'id', 'name' ],
    next: [],
    vendor: [],
    serviceType: [],
    sellerPerson: [],
    seller: [],
    reason: [],
    equipSupplier: [],
    customerPerson: [],
    customerContact: [],
    customer: [],
    contract: [],
    city: [],
    ticket: [
           'archivedFlag',           'billDate',
             'billNumber',        'blockNumber',
        'cbsWarrantyFlag',        'checkedFlag',
      'commonFieldString',               'date',
            'description',        'detailsHash',
              'diagPrice',    'failDescription',
             'frozenFlag',               'hash',
                     'id',        'invoiceDate',
                 'number', 'numberFromCustomer',
               'onceFlag',           'paidFlag',
               'parentId',           'partName',
             'partNumber',  'reasonDescription',
            'repairPrice',          'retryFlag',
           'serialNumber',  'subcontractorFlag',
           'warrantyFlag',            'ownerId'
    ]
  }
}
[2019-07-18 14:04:10.319] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 14:04:10.320] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  filters: { models: [ 'ticket' ], ticket: { id: '497030' } },
  fields: { models: [ 'ticket' ], ticket: [ 'id' ] },
  checkedModels: [],
  order: []
}
[2019-07-18 14:04:10.321] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters { models: [ 'ticket' ], ticket: { id: '497030' } }
[2019-07-18 14:04:10.321] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  id ticket
[2019-07-18 14:04:10.323] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  []
[2019-07-18 14:04:10.323] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket' ]
[2019-07-18 14:04:10.323] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 14:04:10.324] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"filters":{"models":["ticket"],"ticket":{"id":"497030"}},"fields":{"models":["ticket"],"ticket":["id"]},"checkedModels":["ticket"],"order":[]}
[2019-07-18 14:04:10.324] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 14:04:10.324] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  []
[2019-07-18 14:04:10.325] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [],
  attributes: [ 'id' ],
  where: { id: '497030' },
  limit: 500
}
[2019-07-18 14:04:10.346] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.347] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id` FROM `orders` AS `ticket` WHERE `ticket`.`id` = '497030' LIMIT 500; 5ms
[2019-07-18 14:04:10.349] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - _tickets: [ { id: 497030 } ]
[2019-07-18 14:04:10.349] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 14:04:10.374] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  fields: {
    ticket: [
           'archivedFlag',           'billDate',
             'billNumber',        'blockNumber',
        'cbsWarrantyFlag',        'checkedFlag',
      'commonFieldString',               'date',
            'description',        'detailsHash',
              'diagPrice',    'failDescription',
             'frozenFlag',               'hash',
                     'id',        'invoiceDate',
                 'number', 'numberFromCustomer',
               'onceFlag',           'paidFlag',
               'parentId',           'partName',
             'partNumber',  'reasonDescription',
            'repairPrice',          'retryFlag',
           'serialNumber',  'subcontractorFlag',
           'warrantyFlag',            'ownerId'
    ],
    city: [],
    contract: [],
    customer: [],
    customerContact: [],
    customerPerson: [],
    equipSupplier: [],
    reason: [],
    seller: [],
    sellerPerson: [],
    serviceType: [],
    vendor: [],
    next: [],
    status: [ 'id', 'name' ],
    equipment: [],
    equipmentType: [],
    timeout: [ 'timeout', 'reasonId' ],
    timeoutReason: [],
    models: [
               'ticket',            'city',
             'contract',        'customer',
      'customerContact',  'customerPerson',
        'equipSupplier',          'reason',
               'seller',    'sellerPerson',
          'serviceType',          'vendor',
                 'next',          'status',
            'equipment',   'equipmentType',
              'timeout',   'timeoutReason'
    ]
  },
  filters: { models: [ 'ticket' ], ticket: { id: [Object] } },
  checkedModels: [],
  order: []
}
[2019-07-18 14:04:10.376] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters { models: [ 'ticket' ], ticket: { id: { '$in': [Array] } } }
[2019-07-18 14:04:10.376] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  id ticket
[2019-07-18 14:04:10.377] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  []
[2019-07-18 14:04:10.378] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket' ]
[2019-07-18 14:04:10.378] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 14:04:10.379] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"fields":{"ticket":["archivedFlag","billDate","billNumber","blockNumber","cbsWarrantyFlag","checkedFlag","commonFieldString","date","description","detailsHash","diagPrice","failDescription","frozenFlag","hash","id","invoiceDate","number","numberFromCustomer","onceFlag","paidFlag","parentId","partName","partNumber","reasonDescription","repairPrice","retryFlag","serialNumber","subcontractorFlag","warrantyFlag","ownerId"],"city":[],"contract":[],"customer":[],"customerContact":[],"customerPerson":[],"equipSupplier":[],"reason":[],"seller":[],"sellerPerson":[],"serviceType":[],"vendor":[],"next":[],"status":["id","name"],"equipment":[],"equipmentType":[],"timeout":["timeout","reasonId"],"timeoutReason":[],"models":["ticket","city","contract","customer","customerContact","customerPerson","equipSupplier","reason","seller","sellerPerson","serviceType","vendor","next","status","equipment","equipmentType","timeout","timeoutReason"]},"filters":{"models":["ticket"],"ticket":{"id":{"$in":[497030]}}},"checkedModels":["ticket"],"order":[]}
[2019-07-18 14:04:10.379] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 14:04:10.380] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  [
  {
    model: [Function: status] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'status',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getNextStatus: [Function]
    },
    required: true,
    attributes: [ 'id', 'name' ]
  },
  {
    model: [Function: city] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'city',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: {},
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: false,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array]
    }
  },
  {
    include: { model: [Function] },
    model: [Function: equipment] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'equipment',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      myAssociations: [Array]
    }
  },
  {
    model: [Function: customer] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'customers',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getByName: [Function]
    }
  },
  {
    as: 'customerPerson',
    model: [Function: contacts] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'contacts',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getFirstCustomerContact: [AsyncFunction]
    }
  },
  {
    model: [Function: serviceType] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'servicetype',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: {},
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: false,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getAvailable: [Function]
    }
  },
  {
    model: [Function: vendor] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'vendors',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      values: [Object]
    }
  },
  {
    as: 'seller',
    model: [Function: customer] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'customers',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getByName: [Function]
    }
  },
  {
    as: 'sellerPerson',
    model: [Function: contacts] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'contacts',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getFirstCustomerContact: [AsyncFunction]
    }
  },
  {
    model: [Function: contract] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'contract',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object]
    }
  },
  {
    model: [Function: reason] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'reasons',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      getParent: [Function],
      getChildren: [Function],
      getCount: [Function]
    }
  },
  {
    include: { model: [Function] },
    where: { activeFlag: 1 },
    required: false,
    model: [Function: timeout] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'order_timeout',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'ticketId',
      primaryKeyField: 'order_id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: null,
      _scope: {},
      _scopeNames: [Array],
      transactionCreateTimeout: [AsyncFunction],
      create: [Function],
      getAll: [AsyncFunction],
      deactivate: [Function],
      myAssociations: [Array]
    },
    attributes: [ 'timeout', 'reasonId' ]
  }
]
[2019-07-18 14:04:10.399] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true, attributes: [Array] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function],
      attributes: [Array]
    }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ],
    'archivedFlag',
    'billDate',
    'billNumber',
    'blockNumber',
    'cbsWarrantyFlag',
    'checkedFlag',
    'commonFieldString',
    'date',
    'description',
    'detailsHash',
    'diagPrice',
    'failDescription',
    'frozenFlag',
    'hash',
    'id',
    'invoiceDate',
    'number',
    'numberFromCustomer',
    'onceFlag',
    'paidFlag',
    'parentId',
    'partName',
    'partNumber',
    'reasonDescription',
    'repairPrice',
    'retryFlag',
    'serialNumber',
    'subcontractorFlag',
    'warrantyFlag',
    'ownerId'
  ],
  where: { id: { '$in': [Array] } }
}
[2019-07-18 14:04:10.460] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.461] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`archived` AS `archivedFlag`, `ticket`.`billdate` AS `billDate`, `ticket`.`billnumber` AS `billNumber`, `ticket`.`blocknumber` AS `blockNumber`, `ticket`.`cbswarranty` AS `cbsWarrantyFlag`, `ticket`.`checked` AS `checkedFlag`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`orderdate` AS `date`, `ticket`.`description`, `ticket`.`details_hash` AS `detailsHash`, `ticket`.`diagnostics` AS `diagPrice`, `ticket`.`fail_description` AS `failDescription`, `ticket`.`frozen` AS `frozenFlag`, `ticket`.`hash`, `ticket`.`id`, `ticket`.`invoicedate` AS `invoiceDate`, `ticket`.`ordernumber` AS `number`, `ticket`.`onbycustomer` AS `numberFromCustomer`, `ticket`.`once` AS `onceFlag`, `ticket`.`paid_by_customer` AS `paidFlag`, `ticket`.`parentorderid` AS `parentId`, `ticket`.`partname` AS `partName`, `ticket`.`partnumber` AS `partNumber`, `ticket`.`reason_description` AS `reasonDescription`, `ticket`.`price` AS `repairPrice`, `ticket`.`retry` AS `retryFlag`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`subcontractor` AS `subcontractorFlag`, `ticket`.`warranty` AS `warrantyFlag`, `ticket`.`ownerid` AS `ownerId`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `city`.`id` AS `city.id`, `city`.`name` AS `city.name`, `city`.`code` AS `city.code`, `equipment`.`id` AS `equipment.id`, `equipment`.`customerid` AS `equipment.customerId`, `equipment`.`cityid` AS `equipment.cityId`, `equipment`.`typemodelid` AS `equipment.typeId`, `equipment`.`service_contract_id` AS `equipment.contractId`, `equipment`.`place` AS `equipment.location`, `equipment`.`regnumber` AS `equipment.regNumber`, `equipment`.`serialnumber` AS `equipment.serialNumber`, `equipment`.`endcbswarrantydate` AS `equipment.endCBSWarrantyDate`, `equipment`.`endwarrantydate` AS `equipment.endWarrantyDate`, `equipment`.`bna` AS `equipment.bnaFlag`, `equipment`.`archived` AS `equipment.archivedFlag`, `equipment`.`update_time` AS `equipment.updateTime`, `equipment`.`cityid` AS `equipment.cityid`, `equipment`.`typemodelid` AS `equipment.typemodelid`, `equipment`.`customerid` AS `equipment.customerid`, `equipment`.`service_contract_id` AS `equipment.service_contract_id`, `equipment->equipmentType`.`id` AS `equipment.equipmentType.id`, `equipment->equipmentType`.`vendorid` AS `equipment.equipmentType.vendorId`, `equipment->equipmentType`.`typemodel` AS `equipment.equipmentType.model`, `equipment->equipmentType`.`name` AS `equipment.equipmentType.name`, `equipment->equipmentType`.`vendorid` AS `equipment.equipmentType.vendorid`, `customer`.`id` AS `customer.id`, `customer`.`customertypeid` AS `customer.typeId`, `customer`.`city_id` AS `customer.cityId`, `customer`.`cbs_user_id` AS `customer.userId`, `customer`.`name` AS `customer.name`, `customer`.`address` AS `customer.address`, `customer`.`rnn` AS `customer.rnn`, `customer`.`bik` AS `customer.bik`, `customer`.`rs` AS `customer.rs`, `customer`.`bank` AS `customer.bank`, `customer`.`seller` AS `customer.sellerFlag`, `customer`.`active` AS `customer.active`, `customerPerson`.`id` AS `customerPerson.id`, `customerPerson`.`customerid` AS `customerPerson.customerId`, `customerPerson`.`cityid` AS `customerPerson.cityId`, `customerPerson`.`name` AS `customerPerson.name`, `customerPerson`.`post` AS `customerPerson.post`, `customerPerson`.`address` AS `customerPerson.address`, `customerPerson`.`phones` AS `customerPerson.phone`, `customerPerson`.`email` AS `customerPerson.email`, `customerPerson`.`iin` AS `customerPerson.iin`, `customerPerson`.`id_card_number` AS `customerPerson.cardNumber`, `customerPerson`.`id_card_date` AS `customerPerson.cardDate`, `customerPerson`.`spam_accepted` AS `customerPerson.dispatch`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name`, `vendor`.`id` AS `vendor.id`, `vendor`.`name` AS `vendor.name`, `vendor`.`appendix` AS `vendor.appendix`, `vendor`.`inner_vendor` AS `vendor.innerFlag`, `seller`.`id` AS `seller.id`, `seller`.`customertypeid` AS `seller.typeId`, `seller`.`city_id` AS `seller.cityId`, `seller`.`cbs_user_id` AS `seller.userId`, `seller`.`name` AS `seller.name`, `seller`.`address` AS `seller.address`, `seller`.`rnn` AS `seller.rnn`, `seller`.`bik` AS `seller.bik`, `seller`.`rs` AS `seller.rs`, `seller`.`bank` AS `seller.bank`, `seller`.`seller` AS `seller.sellerFlag`, `seller`.`active` AS `seller.active`, `sellerPerson`.`id` AS `sellerPerson.id`, `sellerPerson`.`customerid` AS `sellerPerson.customerId`, `sellerPerson`.`cityid` AS `sellerPerson.cityId`, `sellerPerson`.`name` AS `sellerPerson.name`, `sellerPerson`.`post` AS `sellerPerson.post`, `sellerPerson`.`address` AS `sellerPerson.address`, `sellerPerson`.`phones` AS `sellerPerson.phone`, `sellerPerson`.`email` AS `sellerPerson.email`, `sellerPerson`.`iin` AS `sellerPerson.iin`, `sellerPerson`.`id_card_number` AS `sellerPerson.cardNumber`, `sellerPerson`.`id_card_date` AS `sellerPerson.cardDate`, `sellerPerson`.`spam_accepted` AS `sellerPerson.dispatch`, `contract`.`id` AS `contract.id`, `contract`.`contracttypeid` AS `contract.typeId`, `contract`.`customerid` AS `contract.customerId`, `contract`.`name` AS `contract.name`, `contract`.`startdate` AS `contract.startDate`, `contract`.`enddate` AS `contract.endDate`, `contract`.`customerid` AS `contract.customerid`, `reason`.`id` AS `reason.id`, `reason`.`name` AS `reason.name`, `reason`.`parent_id` AS `reason.parentId`, `reason`.`vendor_id` AS `reason.vendorId`, `timeout`.`order_id` AS `timeout.ticketId`, `timeout`.`timeout` AS `timeout.timeout`, `timeout`.`reason_id` AS `timeout.reasonId`, `timeout->timeoutReason`.`id` AS `timeout.timeoutReason.id`, `timeout->timeoutReason`.`name` AS `timeout.timeoutReason.name` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` LEFT OUTER JOIN `city` AS `city` ON `ticket`.`cityid` = `city`.`id` LEFT OUTER JOIN `equipment` AS `equipment` ON `ticket`.`equipmentid` = `equipment`.`id` LEFT OUTER JOIN `equipmenttypes` AS `equipment->equipmentType` ON `equipment`.`typemodelid` = `equipment->equipmentType`.`id` LEFT OUTER JOIN `customers` AS `customer` ON `ticket`.`customerid` = `customer`.`id` LEFT OUTER JOIN `contacts` AS `customerPerson` ON `ticket`.`cpersonid` = `customerPerson`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticket`.`servicetypeid` = `serviceType`.`id` LEFT OUTER JOIN `vendors` AS `vendor` ON `ticket`.`vendorid` = `vendor`.`id` LEFT OUTER JOIN `customers` AS `seller` ON `ticket`.`seller_id` = `seller`.`id` LEFT OUTER JOIN `contacts` AS `sellerPerson` ON `ticket`.`seller_cperson_id` = `sellerPerson`.`id` LEFT OUTER JOIN `contract` AS `contract` ON `ticket`.`contractid` = `contract`.`id` LEFT OUTER JOIN `reasons` AS `reason` ON `ticket`.`reason_id` = `reason`.`id` LEFT OUTER JOIN `order_timeout` AS `timeout` ON `ticket`.`id` = `timeout`.`order_id` AND `timeout`.`active` = 1 LEFT OUTER JOIN `order_timeout_reason` AS `timeout->timeoutReason` ON `timeout`.`reason_id` = `timeout->timeoutReason`.`id` WHERE `ticket`.`id` IN (497030); 33ms
[2019-07-18 14:04:10.471] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497030
[2019-07-18 14:04:10.516] [Level { level: 20000, levelStr: 'INFO' }] [default] - getNextStatus - 
[2019-07-18 14:04:10.516] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - tickets:  [
  {
    description: 'Communications problem with Encrypted PIN Pad',
    'perm--serviceType': 1,
    'perm--setPerformer': 1,
    'perm--comment': 1,
    'perm--status': 1,
    'perm--partOrder--needPart--addition': 1,
    'perm--partOrder--generalPart--addition': 0,
    'perm--partOrder--generalPart--editing': 0,
    'perm--instPart--addition': 1,
    archivedFlag: 0,
    billDate: '2013-02-06',
    billNumber: '',
    blockNumber: null,
    cbsWarrantyFlag: 0,
    checkedFlag: null,
    commonFieldString: null,
    date: '2018-05-14',
    detailsHash: '29477912',
    diagPrice: '',
    failDescription: null,
    frozenFlag: 0,
    hash: '22cdbeaa7ff6d29f19948262566e7fd3',
    id: 497030,
    invoiceDate: null,
    number: 'D21846M',
    numberFromCustomer: '',
    onceFlag: null,
    paidFlag: 0,
    parentId: 0,
    partName: null,
    partNumber: null,
    reasonDescription: null,
    repairPrice: '',
    retryFlag: 0,
    serialNumber: null,
    subcontractorFlag: 0,
    warrantyFlag: 0,
    ownerId: 161,
    status: { id: 3, name: 'Назначен исполнитель' },
    city: { id: 1, name: 'Алматы', code: 'almaty' },
    equipment: {
      id: 15571,
      customerId: 1,
      cityId: 1,
      typeId: 766,
      contractId: 1,
      location: 'г. Алматы, ул. Жандосова, 25, здание Головного банка, Opteva 828',
      regNumber: '1577',
      serialNumber: '1828FH100722',
      endCBSWarrantyDate: '2015-07-27',
      endWarrantyDate: null,
      bnaFlag: 0,
      archivedFlag: 0,
      updateTime: 2014-12-10T13:03:00.000Z,
      cityid: 1,
      typemodelid: 766,
      customerid: 1,
      service_contract_id: 1,
      equipmentType: [Object]
    },
    customer: {
      id: 1,
      typeId: 1,
      cityId: null,
      userId: null,
      name: 'КазКоммерцБанк',
      address: 'г.Алматы, ул Гагарина 135Ж',
      rnn: '600700323567',
      bik: '1312213',
      rs: '2342333',
      bank: '',
      sellerFlag: 0,
      active: 1
    },
    customerPerson: {
      id: 1,
      customerId: 1,
      cityId: 1,
      name: 'Архипов Степан',
      post: '',
      address: 'Гагарина 135Ж',
      phone: '2585137',
      email: 'sarkhipov@qazkom.kz',
      iin: null,
      cardNumber: null,
      cardDate: null,
      dispatch: 1
    },
    serviceType: { id: 1, name: 'Оперативное обслуживание' },
    vendor: { id: 1, name: 'Diebold', appendix: 'D', innerFlag: 0 },
    seller: null,
    sellerPerson: null,
    contract: {
      id: 1,
      typeId: null,
      customerId: 1,
      name: '10 CBS-C  ',
      startDate: '2006-12-29',
      endDate: '2018-12-31',
      customerid: 1
    },
    reason: null,
    timeout: null
  }
]
[2019-07-18 14:04:10.535] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:04:10.540] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.543] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497030' ORDER BY `ticketHistory`.`statustime` ASC; 58ms
[2019-07-18 14:04:10.544] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.545] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 7ms
[2019-07-18 14:04:10.547] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497030 200 76ms 1.28kb
[2019-07-18 14:04:10.548] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:04:10.559] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRoleId
[2019-07-18 14:04:10.590] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.593] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT 
    id
FROM groups 
WHERE 
    weight = 7
LIMIT 1; 7ms
[2019-07-18 14:04:10.595] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - roleId: 1
[2019-07-18 14:04:10.597] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.599] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT 
    o.id as `ticketId`,
    s.id, 
    s.name 
FROM orders o
INNER JOIN ticket_next_status ns ON o.statusid = ns.current_id 
INNER JOIN role_status rs ON rs.status_id = ns.next_id
INNER JOIN `status` s ON ns.next_id = s.id
WHERE
    rs.role_id = 1
    AND ns.ticket_type_id = o.ordertypeid
    AND o.id IN (497030)
; 1ms
[2019-07-18 14:04:10.606] [Level { level: 20000, levelStr: 'INFO' }] [default] - getCustomerContact - 
[2019-07-18 14:04:10.632] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.650] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `contacts`.`id`, `contacts`.`customerid` AS `customerId`, `contacts`.`cityid` AS `cityId`, `contacts`.`name`, `contacts`.`post`, `contacts`.`address`, `contacts`.`phones` AS `phone`, `contacts`.`email`, `contacts`.`iin`, `contacts`.`id_card_number` AS `cardNumber`, `contacts`.`id_card_date` AS `cardDate`, `contacts`.`spam_accepted` AS `dispatch` FROM `contacts` AS `contacts` INNER JOIN `orders` AS `ticket` ON `contacts`.`customerid` = `ticket`.`customerid` AND `ticket`.`id` = 497030 LIMIT 1; 3ms
[2019-07-18 14:04:10.656] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497030?userId=1
[2019-07-18 14:04:10.660] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:04:10.688] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets?fields=%7B%22ticket%22%3A%5B%22archivedFlag%22%2C%22billDate%22%2C%22billNumber%22%2C%22blockNumber%22%2C%22cbsWarrantyFlag%22%2C%22checkedFlag%22%2C%22commonFieldString%22%2C%22date%22%2C%22description%22%2C%22detailsHash%22%2C%22diagPrice%22%2C%22failDescription%22%2C%22frozenFlag%22%2C%22hash%22%2C%22id%22%2C%22invoiceDate%22%2C%22number%22%2C%22numberFromCustomer%22%2C%22onceFlag%22%2C%22paidFlag%22%2C%22parentId%22%2C%22partName%22%2C%22partNumber%22%2C%22reasonDescription%22%2C%22repairPrice%22%2C%22retryFlag%22%2C%22serialNumber%22%2C%22subcontractorFlag%22%2C%22warrantyFlag%22%2C%22ownerId%22%5D%2C%22city%22%3A%5B%5D%2C%22contract%22%3A%5B%5D%2C%22customer%22%3A%5B%5D%2C%22customerContact%22%3A%5B%5D%2C%22customerPerson%22%3A%5B%5D%2C%22equipSupplier%22%3A%5B%5D%2C%22reason%22%3A%5B%5D%2C%22seller%22%3A%5B%5D%2C%22sellerPerson%22%3A%5B%5D%2C%22serviceType%22%3A%5B%5D%2C%22vendor%22%3A%5B%5D%2C%22status%22%3A%5B%22id%22%2C%22name%22%2C%7B%22next%22%3A%5B%5D%7D%5D%2C%22equipment%22%3A%5B%5D%2C%22equipmentType%22%3A%5B%5D%2C%22timeout%22%3A%5B%22timeout%22%2C%22reasonId%22%5D%2C%22timeoutReason%22%3A%5B%5D%7D&filters=%7B%22ticket%22%3A%7B%22id%22%3A%22497030%22%7D%7D&userId=1 200 410ms 3.64kb
[2019-07-18 14:04:10.693] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.697] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497030') AS `id`; 9ms
[2019-07-18 14:04:10.713] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:04:10.716] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:04:10.722] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.740] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 4ms
[2019-07-18 14:04:10.742] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:04:10.750] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.750] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497030'; 2ms
[2019-07-18 14:04:10.752] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:04:10.752] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497030,
  number: 'D21846M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 26,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 15571
}
[2019-07-18 14:04:10.753] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:04:10.754] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497030,
  number: 'D21846M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 26,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 15571
}
[2019-07-18 14:04:10.759] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:04:10.760] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497030; 2ms
[2019-07-18 14:04:10.765] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497030?userId=1 200 109ms 579b
[2019-07-18 14:11:05.887] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=496972&userId=1
[2019-07-18 14:11:05.888] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:11:05.893] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:05.894] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:11:05.894] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:11:05.911] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:05.912] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '496972'; 2ms
[2019-07-18 14:11:05.916] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=496972&userId=1 200 29ms 677b
[2019-07-18 14:11:05.986] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=496972
[2019-07-18 14:11:05.994] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:05.995] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '496972' ORDER BY `ticketHistory`.`statustime` ASC; 2ms
[2019-07-18 14:11:06.002] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=496972 200 16ms 946b
[2019-07-18 14:11:06.047] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/496972?userId=1
[2019-07-18 14:11:06.048] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:11:06.051] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:06.053] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('496972') AS `id`; 2ms
[2019-07-18 14:11:06.071] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:11:06.071] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:11:06.073] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:06.073] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:11:06.074] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:11:06.076] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:06.076] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '496972'; 1ms
[2019-07-18 14:11:06.077] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:11:06.077] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496972,
  number: 'D21790M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 39,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 19794
}
[2019-07-18 14:11:06.078] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:11:06.078] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496972,
  number: 'D21790M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 39,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 19794
}
[2019-07-18 14:11:06.081] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:06.082] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 496972; 1ms
[2019-07-18 14:11:06.083] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/496972?userId=1 200 36ms 579b
[2019-07-18 14:11:07.227] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=496975&userId=1
[2019-07-18 14:11:07.228] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:11:07.232] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:07.233] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 3ms
[2019-07-18 14:11:07.234] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:11:07.249] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:07.249] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '496975'; 2ms
[2019-07-18 14:11:07.252] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=496975&userId=1 200 25ms 765b
[2019-07-18 14:11:07.292] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=496975
[2019-07-18 14:11:07.299] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:07.300] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '496975' ORDER BY `ticketHistory`.`statustime` ASC; 3ms
[2019-07-18 14:11:07.303] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=496975 200 11ms 948b
[2019-07-18 14:11:07.351] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/496975?userId=1
[2019-07-18 14:11:07.352] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:11:07.353] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:07.354] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('496975') AS `id`; 0ms
[2019-07-18 14:11:07.354] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:11:07.354] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:11:07.356] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:07.356] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:11:07.357] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:11:07.361] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:07.361] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '496975'; 2ms
[2019-07-18 14:11:07.362] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:11:07.363] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496975,
  number: 'D21792M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 55,
  commonFieldString: null,
  cityId: 15,
  serialNumber: null,
  equipmentId: 6831
}
[2019-07-18 14:11:07.365] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:11:07.365] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496975,
  number: 'D21792M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 55,
  commonFieldString: null,
  cityId: 15,
  serialNumber: null,
  equipmentId: 6831
}
[2019-07-18 14:11:07.368] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:07.369] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 496975; 1ms
[2019-07-18 14:11:07.370] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/496975?userId=1 200 19ms 579b
[2019-07-18 14:11:08.814] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=496976&userId=1
[2019-07-18 14:11:08.814] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:11:08.816] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:08.816] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:11:08.817] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:11:08.828] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:08.842] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '496976'; 2ms
[2019-07-18 14:11:08.844] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=496976&userId=1 200 30ms 292b
[2019-07-18 14:11:08.874] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=496976
[2019-07-18 14:11:08.878] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:08.879] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '496976' ORDER BY `ticketHistory`.`statustime` ASC; 1ms
[2019-07-18 14:11:08.883] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=496976 200 9ms 2.39kb
[2019-07-18 14:11:08.909] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/496976?userId=1
[2019-07-18 14:11:08.910] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:11:08.931] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:08.932] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('496976') AS `id`; 0ms
[2019-07-18 14:11:08.932] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:11:08.933] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:11:08.934] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:08.934] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:11:08.935] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:11:08.938] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:08.938] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '496976'; 1ms
[2019-07-18 14:11:08.939] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:11:08.940] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496976,
  number: 'D21793M',
  typeId: 1,
  statusId: 22,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 8,
  performerId: 250,
  commonFieldString: null,
  cityId: 17,
  serialNumber: null,
  equipmentId: 850
}
[2019-07-18 14:11:08.941] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:11:08.941] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496976,
  number: 'D21793M',
  typeId: 1,
  statusId: 22,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 8,
  performerId: 250,
  commonFieldString: null,
  cityId: 17,
  serialNumber: null,
  equipmentId: 850
}
[2019-07-18 14:11:08.945] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:11:08.945] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 496976; 1ms
[2019-07-18 14:11:08.948] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/496976?userId=1 200 39ms 580b
[2019-07-18 14:27:47.253] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/cities?checksum=0
[2019-07-18 14:27:47.260] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/service-types?checksum=0
[2019-07-18 14:27:47.269] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/statuses?checksum=0
[2019-07-18 14:27:47.272] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/types?checksum=0
[2019-07-18 14:27:47.274] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/vendors?checksum=0
[2019-07-18 14:27:47.276] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/devices?checksum=0
[2019-07-18 14:27:47.287] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/users
[2019-07-18 14:27:47.291] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getByParams
[2019-07-18 14:27:47.302] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.319] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `city`; 1ms
[2019-07-18 14:27:47.321] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.322] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `servicetype`; 20ms
[2019-07-18 14:27:47.322] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.323] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `status`; 20ms
[2019-07-18 14:27:47.323] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.324] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `ordertype`; 21ms
[2019-07-18 14:27:47.325] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 469028310
[2019-07-18 14:27:47.330] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 2129809734
[2019-07-18 14:27:47.333] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 832200969
[2019-07-18 14:27:47.334] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 797875960
[2019-07-18 14:27:47.336] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.336] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `devices`; 11ms
[2019-07-18 14:27:47.346] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.346] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `users` AS `user` WHERE `user`.`blocked` = 0 AND `user`.`name` != 'Administrator' ORDER BY `user`.`name`; 20ms
[2019-07-18 14:27:47.347] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.348] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `city` AS `city` WHERE 1=1 ORDER BY `city`.`name`; 19ms
[2019-07-18 14:27:47.352] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 3672458130
[2019-07-18 14:27:47.354] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.354] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `servicetype` AS `serviceType` WHERE 1=1 ORDER BY `serviceType`.`name`; 16ms
[2019-07-18 14:27:47.358] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.376] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `status` AS `status` WHERE 1=1 ORDER BY `status`.`name`; 20ms
[2019-07-18 14:27:47.387] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/users 200 100ms 11.29kb
[2019-07-18 14:27:47.419] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/cities?checksum=0 200 166ms 1.13kb
[2019-07-18 14:27:47.444] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.465] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `ordertype` AS `type` WHERE 1=1 ORDER BY `type`.`name`; 92ms
[2019-07-18 14:27:47.470] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.489] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `vendors`; 150ms
[2019-07-18 14:27:47.501] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/service-types?checksum=0 200 241ms 692b
[2019-07-18 14:27:47.506] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/statuses?checksum=0 200 237ms 1.28kb
[2019-07-18 14:27:47.550] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.555] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name`, `parent_id` AS `parentId`, `vendor_id` AS `vendorId` FROM `devices` AS `device` WHERE 1=1 ORDER BY `device`.`name`; 166ms
[2019-07-18 14:27:47.580] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 1168970086
[2019-07-18 14:27:47.603] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/types?checksum=0 200 331ms 674b
[2019-07-18 14:27:47.633] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/devices?checksum=0 200 357ms 34.54kb
[2019-07-18 14:27:47.645] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.647] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `vendors` AS `vendor` WHERE 1=1 ORDER BY `vendor`.`name`; 20ms
[2019-07-18 14:27:47.652] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/vendors?checksum=0 200 378ms 1.66kb
[2019-07-18 14:27:47.789] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1
[2019-07-18 14:27:47.791] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:27:47.796] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:27:47.800] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:27:47.800] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 14:27:47.802] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:27:47.803] [Level { level: 20000, levelStr: 'INFO' }] [default] - getAll_DualSearch
[2019-07-18 14:27:47.806] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true },
    { as: 'performer', model: [Function] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { attributes: [], model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] },
    { include: [Array], separate: true, model: [Function] },
    {
      include: [Array],
      as: 'history',
      separate: true,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ]
  ]
}
