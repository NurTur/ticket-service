[2019-07-18 11:36:09.353] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/319499?userId=1 200 39ms 1.29kb
[2019-07-18 11:36:10.543] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=420812&userId=1
[2019-07-18 11:36:10.544] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 11:36:10.545] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.545] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 11:36:10.547] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 11:36:10.558] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.570] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '420812'; 3ms
[2019-07-18 11:36:10.572] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=420812&userId=1 200 29ms 6.05kb
[2019-07-18 11:36:10.598] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=420812
[2019-07-18 11:36:10.611] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.611] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '420812' ORDER BY `ticketHistory`.`statustime` ASC; 11ms
[2019-07-18 11:36:10.614] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=420812 200 16ms 3.29kb
[2019-07-18 11:36:10.634] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/420812?userId=1
[2019-07-18 11:36:10.635] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 11:36:10.636] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.636] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('420812') AS `id`; 1ms
[2019-07-18 11:36:10.637] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 11:36:10.637] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 11:36:10.639] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.640] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 0ms
[2019-07-18 11:36:10.640] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 11:36:10.643] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.643] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '420812'; 1ms
[2019-07-18 11:36:10.644] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 11:36:10.645] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 0,
  'perm--setPerformer': 0,
  'perm--comment': 0,
  'perm--status': 0,
  'perm--partOrder--needPart--addition': 0,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 0,
  id: 420812,
  number: 'L693SW-17',
  typeId: 4,
  statusId: 7,
  vendorId: 5,
  date: '2017-07-03',
  customerId: 9052,
  serviceTypeId: 3,
  performerId: 181,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 23884
}
[2019-07-18 11:36:10.645] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 11:36:10.645] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 0,
  'perm--setPerformer': 0,
  'perm--comment': 0,
  'perm--status': 0,
  'perm--partOrder--needPart--addition': 0,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 0,
  id: 420812,
  number: 'L693SW-17',
  typeId: 4,
  statusId: 7,
  vendorId: 5,
  date: '2017-07-03',
  customerId: 9052,
  serviceTypeId: 3,
  performerId: 181,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 23884
}
[2019-07-18 11:36:10.649] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.649] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 420812; 1ms
[2019-07-18 11:36:10.650] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 11:36:10.650] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [
  {
    id: 420815,
    number: 'L706QW-17',
    typeId: 5,
    statusId: 7,
    vendorId: 5,
    date: '2017-07-03',
    customerId: 9052,
    serviceTypeId: 9,
    performerId: 74,
    commonFieldString: null,
    cityId: 2,
    serialNumber: null,
    equipmentId: null,
    perm: {
      serviceType: 0,
      setPerformer: 0,
      comment: 0,
      status: 0,
      partOrder: [Object],
      instPart: [Object]
    }
  },
  {
    id: 430437,
    number: 'L298T-17',
    typeId: 7,
    statusId: 19,
    vendorId: 5,
    date: '2017-08-14',
    customerId: 12,
    serviceTypeId: 3,
    performerId: 11,
    commonFieldString: null,
    cityId: 2,
    serialNumber: null,
    equipmentId: 0,
    perm: {
      serviceType: 0,
      setPerformer: 0,
      comment: 0,
      status: 0,
      partOrder: [Object],
      instPart: [Object]
    }
  }
]
[2019-07-18 11:36:10.651] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 11:36:10.652] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  id: 420815,
  number: 'L706QW-17',
  typeId: 5,
  statusId: 7,
  vendorId: 5,
  date: '2017-07-03',
  customerId: 9052,
  serviceTypeId: 9,
  performerId: 74,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: null,
  perm: {
    serviceType: 0,
    setPerformer: 0,
    comment: 0,
    status: 0,
    partOrder: { needPart: [Object], generalPart: [Object] },
    instPart: { addition: 0 }
  }
}
[2019-07-18 11:36:10.654] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.655] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 420815; 1ms
[2019-07-18 11:36:10.656] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 11:36:10.656] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  id: 430437,
  number: 'L298T-17',
  typeId: 7,
  statusId: 19,
  vendorId: 5,
  date: '2017-08-14',
  customerId: 12,
  serviceTypeId: 3,
  performerId: 11,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 0,
  perm: {
    serviceType: 0,
    setPerformer: 0,
    comment: 0,
    status: 0,
    partOrder: { needPart: [Object], generalPart: [Object] },
    instPart: { addition: 0 }
  }
}
[2019-07-18 11:36:10.660] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:10.675] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 430437; 1ms
[2019-07-18 11:36:10.677] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/420812?userId=1 200 43ms 1.98kb
[2019-07-18 11:36:14.311] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=420078&userId=1
[2019-07-18 11:36:14.313] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 11:36:14.333] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.334] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 0ms
[2019-07-18 11:36:14.334] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 11:36:14.347] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.347] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '420078'; 4ms
[2019-07-18 11:36:14.349] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=420078&userId=1 200 38ms 292b
[2019-07-18 11:36:14.367] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=420078
[2019-07-18 11:36:14.371] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.372] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '420078' ORDER BY `ticketHistory`.`statustime` ASC; 2ms
[2019-07-18 11:36:14.374] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=420078 200 7ms 2.63kb
[2019-07-18 11:36:14.390] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/420078?userId=1
[2019-07-18 11:36:14.390] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 11:36:14.392] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.392] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('420078') AS `id`; 1ms
[2019-07-18 11:36:14.393] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 11:36:14.393] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 11:36:14.395] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.395] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 11:36:14.396] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 11:36:14.399] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.399] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '420057'; 1ms
[2019-07-18 11:36:14.414] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 11:36:14.415] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 0,
  'perm--setPerformer': 0,
  'perm--comment': 0,
  'perm--status': 0,
  'perm--partOrder--needPart--addition': 0,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 0,
  id: 420057,
  number: 'L684SW-17',
  typeId: 4,
  statusId: 7,
  vendorId: 5,
  date: '2017-06-30',
  customerId: 9032,
  serviceTypeId: 3,
  performerId: 206,
  commonFieldString: null,
  cityId: 4,
  serialNumber: null,
  equipmentId: 23804
}
[2019-07-18 11:36:14.415] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 11:36:14.416] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 0,
  'perm--setPerformer': 0,
  'perm--comment': 0,
  'perm--status': 0,
  'perm--partOrder--needPart--addition': 0,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 0,
  id: 420057,
  number: 'L684SW-17',
  typeId: 4,
  statusId: 7,
  vendorId: 5,
  date: '2017-06-30',
  customerId: 9032,
  serviceTypeId: 3,
  performerId: 206,
  commonFieldString: null,
  cityId: 4,
  serialNumber: null,
  equipmentId: 23804
}
[2019-07-18 11:36:14.420] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.420] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 420057; 2ms
[2019-07-18 11:36:14.421] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 11:36:14.422] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [
  {
    id: 420078,
    number: 'L693QW-17',
    typeId: 5,
    statusId: 7,
    vendorId: 5,
    date: '2017-06-30',
    customerId: 9032,
    serviceTypeId: 9,
    performerId: 74,
    commonFieldString: null,
    cityId: 4,
    serialNumber: null,
    equipmentId: null,
    perm: {
      serviceType: 0,
      setPerformer: 0,
      comment: 0,
      status: 0,
      partOrder: [Object],
      instPart: [Object]
    }
  },
  {
    id: 424523,
    number: 'L254T-17',
    typeId: 7,
    statusId: 19,
    vendorId: 5,
    date: '2017-07-19',
    customerId: 12,
    serviceTypeId: 9,
    performerId: 206,
    commonFieldString: null,
    cityId: 4,
    serialNumber: null,
    equipmentId: 0,
    perm: {
      serviceType: 0,
      setPerformer: 0,
      comment: 0,
      status: 0,
      partOrder: [Object],
      instPart: [Object]
    }
  }
]
[2019-07-18 11:36:14.423] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 11:36:14.423] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  id: 420078,
  number: 'L693QW-17',
  typeId: 5,
  statusId: 7,
  vendorId: 5,
  date: '2017-06-30',
  customerId: 9032,
  serviceTypeId: 9,
  performerId: 74,
  commonFieldString: null,
  cityId: 4,
  serialNumber: null,
  equipmentId: null,
  perm: {
    serviceType: 0,
    setPerformer: 0,
    comment: 0,
    status: 0,
    partOrder: { needPart: [Object], generalPart: [Object] },
    instPart: { addition: 0 }
  }
}
[2019-07-18 11:36:14.427] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.427] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 420078; 1ms
[2019-07-18 11:36:14.429] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 11:36:14.429] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  id: 424523,
  number: 'L254T-17',
  typeId: 7,
  statusId: 19,
  vendorId: 5,
  date: '2017-07-19',
  customerId: 12,
  serviceTypeId: 9,
  performerId: 206,
  commonFieldString: null,
  cityId: 4,
  serialNumber: null,
  equipmentId: 0,
  perm: {
    serviceType: 0,
    setPerformer: 0,
    comment: 0,
    status: 0,
    partOrder: { needPart: [Object], generalPart: [Object] },
    instPart: { addition: 0 }
  }
}
[2019-07-18 11:36:14.432] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 11:36:14.432] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 424523; 1ms
[2019-07-18 11:36:14.434] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/420078?userId=1 200 44ms 1.98kb
[2019-07-18 13:24:11.156] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - availableModels:  {
  ticket: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ]
  },
  status: [Function: status] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'status',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'status',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object], final: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { final: [Function: wrapper] },
    fieldRawAttributesMap: { id: [Object], name: [Object], final: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: { id: [Object], name: [Object], final: [Object] },
    tableAttributes: { id: [Object], name: [Object], final: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: {
      registered: 1,
      appointed: 3,
      partWaiting: 4,
      handled: 5,
      customerWaiting: 6,
      closed: 7,
      annuled: 19,
      custRefused: 20,
      underway: 22,
      compensation: 25,
      cancelled: 28,
      shipped: 29,
      available: 30
    },
    getNextStatus: [Function]
  },
  performer: [Function: user] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'users',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { city: [BelongsTo], department: [BelongsTo] },
    underscored: undefined,
    tableName: 'users',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: { blocked: [Function: _sanitize] },
    _booleanAttributes: [ 'blocked' ],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      deputyId: [Function: wrapper],
      cityId: [Function: wrapper],
      name: [Function: wrapper],
      login: [Function: wrapper],
      password: [Function: wrapper],
      departmentId: [Function: wrapper],
      email: [Function: wrapper],
      blocked: [Function: wrapper],
      hash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      deputy_id: [Object],
      city_id: [Object],
      name: [Object],
      username: [Object],
      password: [Object],
      departmentid: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object]
    },
    fieldAttributeMap: { deputy_id: 'deputyId', username: 'login' },
    uniqueKeys: {},
    _hasBooleanAttributes: true,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    tableAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    RoleValues: {
      noUser: -1,
      unset: 0,
      director: 1,
      engineer: 2,
      headOfDepartment: 3,
      seniorEngineer: 4,
      coordinator: 5,
      seniorCoordinator: 6,
      administrator: 7,
      regionalManager: 8
    },
    getUserRole: [AsyncFunction],
    getUserRoleId: [AsyncFunction],
    autorize: [AsyncFunction],
    getByParams: [AsyncFunction]
  },
  city: [Function: city] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'city',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'city',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object], code: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {},
    fieldRawAttributesMap: { id: [Object], name: [Object], code: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: false,
    attributes: { id: [Object], name: [Object], code: [Object] },
    tableAttributes: { id: [Object], name: [Object], code: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ]
  },
  equipment: [Function: equipment] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'equipment',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      city: [BelongsTo],
      equipmentType: [BelongsTo],
      customer: [BelongsTo],
      contract: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'equipment',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      typeId: [Object],
      contractId: [Object],
      location: [Object],
      regNumber: [Object],
      serialNumber: [Object],
      endCBSWarrantyDate: [Object],
      endWarrantyDate: [Object],
      bnaFlag: [Object],
      archivedFlag: [Object],
      updateTime: [Object],
      cityid: [Object],
      typemodelid: [Object],
      customerid: [Object],
      service_contract_id: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      endCBSWarrantyDate: [Function: _isChanged],
      endWarrantyDate: [Function: _isChanged],
      updateTime: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      endCBSWarrantyDate: [Function: _sanitize],
      endWarrantyDate: [Function: _sanitize],
      updateTime: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'endCBSWarrantyDate', 'endWarrantyDate', 'updateTime' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      contractId: [Function: wrapper],
      location: [Function: wrapper],
      regNumber: [Function: wrapper],
      endCBSWarrantyDate: [Function: wrapper],
      endWarrantyDate: [Function: wrapper],
      bnaFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      updateTime: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      customerid: [Object],
      cityid: [Object],
      typemodelid: [Object],
      service_contract_id: [Object],
      place: [Object],
      regnumber: [Object],
      serialnumber: [Object],
      endcbswarrantydate: [Object],
      endwarrantydate: [Object],
      bna: [Object],
      archived: [Object],
      update_time: [Object]
    },
    fieldAttributeMap: {
      place: 'location',
      regnumber: 'regNumber',
      serialnumber: 'serialNumber',
      endcbswarrantydate: 'endCBSWarrantyDate',
      endwarrantydate: 'endWarrantyDate',
      bna: 'bnaFlag',
      archived: 'archivedFlag',
      update_time: 'updateTime'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      typeId: [Object],
      contractId: [Object],
      location: [Object],
      regNumber: [Object],
      serialNumber: [Object],
      endCBSWarrantyDate: [Object],
      endWarrantyDate: [Object],
      bnaFlag: [Object],
      archivedFlag: [Object],
      updateTime: [Object],
      cityid: [Object],
      typemodelid: [Object],
      customerid: [Object],
      service_contract_id: [Object]
    },
    tableAttributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      typeId: [Object],
      contractId: [Object],
      location: [Object],
      regNumber: [Object],
      serialNumber: [Object],
      endCBSWarrantyDate: [Object],
      endWarrantyDate: [Object],
      bnaFlag: [Object],
      archivedFlag: [Object],
      updateTime: [Object],
      cityid: [Object],
      typemodelid: [Object],
      customerid: [Object],
      service_contract_id: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: { default: 0 },
    myAssociations: [ 'equipmentType' ]
  },
  equipmentType: [Function: equipmentType] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'equipmenttypes',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { vendor: [BelongsTo] },
    underscored: undefined,
    tableName: 'equipmenttypes',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      vendorId: [Object],
      model: [Object],
      name: [Object],
      vendorid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { model: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      vendorid: [Object],
      typemodel: [Object],
      name: [Object]
    },
    fieldAttributeMap: { typemodel: 'model' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      vendorId: [Object],
      model: [Object],
      name: [Object],
      vendorid: [Object]
    },
    tableAttributes: {
      id: [Object],
      vendorId: [Object],
      model: [Object],
      name: [Object],
      vendorid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getByParams: [Function]
  },
  customer: [Function: customer] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'customers',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'customers',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      typeId: [Object],
      cityId: [Object],
      userId: [Object],
      name: [Object],
      address: [Object],
      rnn: [Object],
      bik: [Object],
      rs: [Object],
      bank: [Object],
      sellerFlag: [Object],
      active: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      cityId: [Function: wrapper],
      userId: [Function: wrapper],
      address: [Function: wrapper],
      rnn: [Function: wrapper],
      bik: [Function: wrapper],
      rs: [Function: wrapper],
      bank: [Function: wrapper],
      sellerFlag: [Function: wrapper],
      active: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      customertypeid: [Object],
      city_id: [Object],
      cbs_user_id: [Object],
      name: [Object],
      address: [Object],
      rnn: [Object],
      bik: [Object],
      rs: [Object],
      bank: [Object],
      seller: [Object],
      active: [Object]
    },
    fieldAttributeMap: {
      customertypeid: 'typeId',
      city_id: 'cityId',
      cbs_user_id: 'userId',
      seller: 'sellerFlag'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      typeId: [Object],
      cityId: [Object],
      userId: [Object],
      name: [Object],
      address: [Object],
      rnn: [Object],
      bik: [Object],
      rs: [Object],
      bank: [Object],
      sellerFlag: [Object],
      active: [Object]
    },
    tableAttributes: {
      id: [Object],
      typeId: [Object],
      cityId: [Object],
      userId: [Object],
      name: [Object],
      address: [Object],
      rnn: [Object],
      bik: [Object],
      rs: [Object],
      bank: [Object],
      sellerFlag: [Object],
      active: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: { cbs: 12 },
    getByName: [Function]
  },
  customerPerson: [Function: contacts] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'contacts',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'contacts',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      name: [Object],
      post: [Object],
      address: [Object],
      phone: [Object],
      email: [Object],
      iin: [Object],
      cardNumber: [Object],
      cardDate: [Object],
      dispatch: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: { cardDate: [Function: _isChanged] },
    _dataTypeSanitizers: { cardDate: [Function: _sanitize] },
    _booleanAttributes: [],
    _dateAttributes: [ 'cardDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      cityId: [Function: wrapper],
      post: [Function: wrapper],
      address: [Function: wrapper],
      phone: [Function: wrapper],
      email: [Function: wrapper],
      iin: [Function: wrapper],
      cardNumber: [Function: wrapper],
      cardDate: [Function: wrapper],
      dispatch: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      customerid: [Object],
      cityid: [Object],
      name: [Object],
      post: [Object],
      address: [Object],
      phones: [Object],
      email: [Object],
      iin: [Object],
      id_card_number: [Object],
      id_card_date: [Object],
      spam_accepted: [Object]
    },
    fieldAttributeMap: {
      customerid: 'customerId',
      cityid: 'cityId',
      phones: 'phone',
      id_card_number: 'cardNumber',
      id_card_date: 'cardDate',
      spam_accepted: 'dispatch'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      name: [Object],
      post: [Object],
      address: [Object],
      phone: [Object],
      email: [Object],
      iin: [Object],
      cardNumber: [Object],
      cardDate: [Object],
      dispatch: [Object]
    },
    tableAttributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      name: [Object],
      post: [Object],
      address: [Object],
      phone: [Object],
      email: [Object],
      iin: [Object],
      cardNumber: [Object],
      cardDate: [Object],
      dispatch: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: { cbs: 9669 },
    getFirstCustomerContact: [AsyncFunction]
  },
  serviceType: [Function: serviceType] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'servicetype',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'servicetype',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {},
    fieldRawAttributesMap: { id: [Object], name: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: false,
    attributes: { id: [Object], name: [Object] },
    tableAttributes: { id: [Object], name: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: { repair: 3, supply: 9 },
    getAvailable: [Function]
  },
  vendor: [Function: vendor] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'vendors',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'vendors',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      name: [Object],
      appendix: [Object],
      innerFlag: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { innerFlag: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      name: [Object],
      appendix: [Object],
      inner_vendor: [Object]
    },
    fieldAttributeMap: { inner_vendor: 'innerFlag' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      name: [Object],
      appendix: [Object],
      innerFlag: [Object]
    },
    tableAttributes: {
      id: [Object],
      name: [Object],
      appendix: [Object],
      innerFlag: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    values: { general: 0 }
  },
  seller: [Function: customer] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'customers',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'customers',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      typeId: [Object],
      cityId: [Object],
      userId: [Object],
      name: [Object],
      address: [Object],
      rnn: [Object],
      bik: [Object],
      rs: [Object],
      bank: [Object],
      sellerFlag: [Object],
      active: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      cityId: [Function: wrapper],
      userId: [Function: wrapper],
      address: [Function: wrapper],
      rnn: [Function: wrapper],
      bik: [Function: wrapper],
      rs: [Function: wrapper],
      bank: [Function: wrapper],
      sellerFlag: [Function: wrapper],
      active: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      customertypeid: [Object],
      city_id: [Object],
      cbs_user_id: [Object],
      name: [Object],
      address: [Object],
      rnn: [Object],
      bik: [Object],
      rs: [Object],
      bank: [Object],
      seller: [Object],
      active: [Object]
    },
    fieldAttributeMap: {
      customertypeid: 'typeId',
      city_id: 'cityId',
      cbs_user_id: 'userId',
      seller: 'sellerFlag'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      typeId: [Object],
      cityId: [Object],
      userId: [Object],
      name: [Object],
      address: [Object],
      rnn: [Object],
      bik: [Object],
      rs: [Object],
      bank: [Object],
      sellerFlag: [Object],
      active: [Object]
    },
    tableAttributes: {
      id: [Object],
      typeId: [Object],
      cityId: [Object],
      userId: [Object],
      name: [Object],
      address: [Object],
      rnn: [Object],
      bik: [Object],
      rs: [Object],
      bank: [Object],
      sellerFlag: [Object],
      active: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: { cbs: 12 },
    getByName: [Function]
  },
  sellerPerson: [Function: contacts] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'contacts',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'contacts',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      name: [Object],
      post: [Object],
      address: [Object],
      phone: [Object],
      email: [Object],
      iin: [Object],
      cardNumber: [Object],
      cardDate: [Object],
      dispatch: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: { cardDate: [Function: _isChanged] },
    _dataTypeSanitizers: { cardDate: [Function: _sanitize] },
    _booleanAttributes: [],
    _dateAttributes: [ 'cardDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      cityId: [Function: wrapper],
      post: [Function: wrapper],
      address: [Function: wrapper],
      phone: [Function: wrapper],
      email: [Function: wrapper],
      iin: [Function: wrapper],
      cardNumber: [Function: wrapper],
      cardDate: [Function: wrapper],
      dispatch: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      customerid: [Object],
      cityid: [Object],
      name: [Object],
      post: [Object],
      address: [Object],
      phones: [Object],
      email: [Object],
      iin: [Object],
      id_card_number: [Object],
      id_card_date: [Object],
      spam_accepted: [Object]
    },
    fieldAttributeMap: {
      customerid: 'customerId',
      cityid: 'cityId',
      phones: 'phone',
      id_card_number: 'cardNumber',
      id_card_date: 'cardDate',
      spam_accepted: 'dispatch'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      name: [Object],
      post: [Object],
      address: [Object],
      phone: [Object],
      email: [Object],
      iin: [Object],
      cardNumber: [Object],
      cardDate: [Object],
      dispatch: [Object]
    },
    tableAttributes: {
      id: [Object],
      customerId: [Object],
      cityId: [Object],
      name: [Object],
      post: [Object],
      address: [Object],
      phone: [Object],
      email: [Object],
      iin: [Object],
      cardNumber: [Object],
      cardDate: [Object],
      dispatch: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: { cbs: 9669 },
    getFirstCustomerContact: [AsyncFunction]
  },
  contract: [Function: contract] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'contract',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { customer: [BelongsTo] },
    underscored: undefined,
    tableName: 'contract',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      typeId: [Object],
      customerId: [Object],
      name: [Object],
      startDate: [Object],
      endDate: [Object],
      customerid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      startDate: [Function: _isChanged],
      endDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      startDate: [Function: _sanitize],
      endDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'startDate', 'endDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { typeId: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      contracttypeid: [Object],
      customerid: [Object],
      name: [Object],
      startdate: [Object],
      enddate: [Object]
    },
    fieldAttributeMap: {
      contracttypeid: 'typeId',
      startdate: 'startDate',
      enddate: 'endDate'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      typeId: [Object],
      customerId: [Object],
      name: [Object],
      startDate: [Object],
      endDate: [Object],
      customerid: [Object]
    },
    tableAttributes: {
      id: [Object],
      typeId: [Object],
      customerId: [Object],
      name: [Object],
      startDate: [Object],
      endDate: [Object],
      customerid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: { default: 0 }
  },
  supplier: [Function: supplier] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'supplier',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'supplier',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {},
    fieldRawAttributesMap: { id: [Object], name: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: false,
    attributes: { id: [Object], name: [Object] },
    tableAttributes: { id: [Object], name: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ]
  },
  reason: [Function: reason] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'reasons',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'reasons',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { parentId: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      name: [Object],
      parent_id: [Object],
      vendor_id: [Object]
    },
    fieldAttributeMap: { parent_id: 'parentId', vendor_id: 'vendorId' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object]
    },
    tableAttributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getParent: [Function],
    getChildren: [Function],
    getCount: [Function]
  },
  generalPart: [Function: generalPart] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'parts',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { customer: [BelongsTo], vendor: [BelongsTo], ticket: [BelongsTo] },
    underscored: undefined,
    tableName: 'parts',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      ticketId: [Object],
      needPartId: [Object],
      vendorId: [Object],
      name: [Object],
      number: [Object],
      substitution: [Object],
      blockNumber: [Object],
      quantity: [Object],
      commonFieldString: [Object],
      commonField2String: [Object],
      commonFieldText: [Object],
      commonTimeStamp: [Object],
      customerId: [Object],
      perm: [Object],
      coord_customer_id: [Object],
      vendor_id: [Object],
      need_part_id: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: { commonTimeStamp: [Function: _isChanged] },
    _dataTypeSanitizers: { commonTimeStamp: [Function: _sanitize] },
    _booleanAttributes: [],
    _dateAttributes: [ 'commonTimeStamp' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      needPartId: [Function: wrapper],
      vendorId: [Function: wrapper],
      number: [Function: wrapper],
      substitution: [Function: wrapper],
      blockNumber: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      commonField2String: [Function: wrapper],
      commonFieldText: [Function: wrapper],
      commonTimeStamp: [Function: wrapper],
      customerId: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      orderid: [Object],
      need_part_id: [Object],
      vendor_id: [Object],
      partname: [Object],
      partnumber: [Object],
      substitution: [Object],
      blocknumber: [Object],
      quantity: [Object],
      sordernumber: [Object],
      pserialnumber: [Object],
      coord_order_number: [Object],
      coord_order_date: [Object],
      coord_customer_id: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      orderid: 'ticketId',
      partname: 'name',
      partnumber: 'number',
      blocknumber: 'blockNumber',
      sordernumber: 'commonFieldString',
      pserialnumber: 'commonField2String',
      coord_order_number: 'commonFieldText',
      coord_order_date: 'commonTimeStamp'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      ticketId: [Object],
      needPartId: [Object],
      vendorId: [Object],
      name: [Object],
      number: [Object],
      substitution: [Object],
      blockNumber: [Object],
      quantity: [Object],
      commonFieldString: [Object],
      commonField2String: [Object],
      commonFieldText: [Object],
      commonTimeStamp: [Object],
      customerId: [Object],
      perm: [Object],
      coord_customer_id: [Object],
      vendor_id: [Object],
      need_part_id: [Object]
    },
    tableAttributes: {
      id: [Object],
      ticketId: [Object],
      needPartId: [Object],
      vendorId: [Object],
      name: [Object],
      number: [Object],
      substitution: [Object],
      blockNumber: [Object],
      quantity: [Object],
      commonFieldString: [Object],
      commonField2String: [Object],
      commonFieldText: [Object],
      commonTimeStamp: [Object],
      customerId: [Object],
      coord_customer_id: [Object],
      vendor_id: [Object],
      need_part_id: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getAll: [AsyncFunction],
    getByNeedPartID: [AsyncFunction],
    getById: [AsyncFunction],
    tryCreate: [AsyncFunction],
    tryUpdate: [AsyncFunction],
    tryDelete: [AsyncFunction],
    transactionAddStatus: [Function],
    transactionFindOne: [Function],
    transactionCreatePart: [Function]
  },
  timeout: [Function: timeout] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'order_timeout',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { timeoutReason: [BelongsTo] },
    underscored: undefined,
    tableName: 'order_timeout',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      ticketId: [Object],
      reasonId: [Object],
      timeout: [Object],
      append: [Object],
      notification: [Object],
      alert: [Object],
      activeFlag: [Object]
    },
    primaryKeys: { ticketId: [Object], reasonId: [Object], timeout: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      timeout: [Function: _isChanged],
      append: [Function: _isChanged],
      notification: [Function: _isChanged],
      alert: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      timeout: [Function: _sanitize],
      append: [Function: _sanitize],
      notification: [Function: _sanitize],
      alert: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'timeout', 'append', 'notification', 'alert' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      append: [Function: wrapper],
      notification: [Function: wrapper],
      alert: [Function: wrapper],
      activeFlag: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      order_id: [Object],
      reason_id: [Object],
      timeout: [Object],
      append_time: [Object],
      notification: [Object],
      alert: [Object],
      active: [Object]
    },
    fieldAttributeMap: {
      order_id: 'ticketId',
      reason_id: 'reasonId',
      append_time: 'append',
      active: 'activeFlag'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      ticketId: [Object],
      reasonId: [Object],
      timeout: [Object],
      append: [Object],
      notification: [Object],
      alert: [Object],
      activeFlag: [Object]
    },
    tableAttributes: {
      ticketId: [Object],
      reasonId: [Object],
      timeout: [Object],
      append: [Object],
      notification: [Object],
      alert: [Object],
      activeFlag: [Object]
    },
    primaryKeyAttributes: [ 'ticketId', 'reasonId', 'timeout' ],
    primaryKeyAttribute: 'ticketId',
    primaryKeyField: 'order_id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: null,
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    transactionCreateTimeout: [AsyncFunction],
    create: [Function],
    getAll: [AsyncFunction],
    deactivate: [Function],
    myAssociations: [ 'timeoutReason' ]
  },
  timeoutReason: [Function: timeoutReason] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'order_timeout_reason',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'order_timeout_reason',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {},
    fieldRawAttributesMap: { id: [Object], name: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: false,
    attributes: { id: [Object], name: [Object] },
    tableAttributes: { id: [Object], name: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ]
  },
  needPart: [Function: needPart] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'needparts',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      user: [BelongsTo],
      unit: [BelongsTo],
      currentStatus: [BelongsTo],
      ticket: [BelongsTo],
      instPart: [HasOne],
      generalPart: [HasOne],
      needPartUser: [BelongsTo],
      needPartUnit: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'needparts',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      ticketId: [Object],
      userId: [Object],
      statusId: [Object],
      name: [Object],
      number: [Object],
      quantity: [Object],
      unitId: [Object],
      appendTime: [Object],
      perm: [Object],
      owner_id: [Object],
      unitid: [Object],
      status: [Object],
      orderid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: { appendTime: [Function: _isChanged] },
    _dataTypeSanitizers: { appendTime: [Function: _sanitize] },
    _booleanAttributes: [],
    _dateAttributes: [ 'appendTime' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      statusId: [Function: wrapper],
      number: [Function: wrapper],
      appendTime: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      orderid: [Object],
      owner_id: [Object],
      status: [Object],
      partname: [Object],
      partnumber: [Object],
      quantity: [Object],
      unitid: [Object],
      append_time: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      partname: 'name',
      partnumber: 'number',
      append_time: 'appendTime'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      ticketId: [Object],
      userId: [Object],
      statusId: [Object],
      name: [Object],
      number: [Object],
      quantity: [Object],
      unitId: [Object],
      appendTime: [Object],
      perm: [Object],
      owner_id: [Object],
      unitid: [Object],
      status: [Object],
      orderid: [Object]
    },
    tableAttributes: {
      id: [Object],
      ticketId: [Object],
      userId: [Object],
      statusId: [Object],
      name: [Object],
      number: [Object],
      quantity: [Object],
      unitId: [Object],
      appendTime: [Object],
      owner_id: [Object],
      unitid: [Object],
      status: [Object],
      orderid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: {
      request: 0,
      underway: 1,
      available: 2,
      cancelled: 3,
      negotiation: 4,
      shipped: 5,
      unused: 6
    },
    getAll: [AsyncFunction],
    getToInstall: [Function],
    getById: [Function],
    tryCreate: [AsyncFunction],
    tryUpdate: [AsyncFunction],
    transactionUpdateStatus: [Function],
    transactionNotInstalledCount: [AsyncFunction],
    myAssociations: [ 'needPartUser', 'needPartUnit', 'currentStatus' ]
  },
  needPartUser: [Function: user] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'users',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { city: [BelongsTo], department: [BelongsTo] },
    underscored: undefined,
    tableName: 'users',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: { blocked: [Function: _sanitize] },
    _booleanAttributes: [ 'blocked' ],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      deputyId: [Function: wrapper],
      cityId: [Function: wrapper],
      name: [Function: wrapper],
      login: [Function: wrapper],
      password: [Function: wrapper],
      departmentId: [Function: wrapper],
      email: [Function: wrapper],
      blocked: [Function: wrapper],
      hash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      deputy_id: [Object],
      city_id: [Object],
      name: [Object],
      username: [Object],
      password: [Object],
      departmentid: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object]
    },
    fieldAttributeMap: { deputy_id: 'deputyId', username: 'login' },
    uniqueKeys: {},
    _hasBooleanAttributes: true,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    tableAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    RoleValues: {
      noUser: -1,
      unset: 0,
      director: 1,
      engineer: 2,
      headOfDepartment: 3,
      seniorEngineer: 4,
      coordinator: 5,
      seniorCoordinator: 6,
      administrator: 7,
      regionalManager: 8
    },
    getUserRole: [AsyncFunction],
    getUserRoleId: [AsyncFunction],
    autorize: [AsyncFunction],
    getByParams: [AsyncFunction]
  },
  needPartUnit: [Function: unit] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'partnames',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      parent: [BelongsTo],
      instPartParentUnit: [BelongsTo],
      needPartParentUnit: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'partnames',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      vendorId: [Object],
      deviceId: [Object],
      name: [Object],
      noOrderFlag: [Object],
      deviceid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { noOrderFlag: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      vendorid: [Object],
      deviceid: [Object],
      name: [Object],
      no_order_flag: [Object]
    },
    fieldAttributeMap: { vendorid: 'vendorId', no_order_flag: 'noOrderFlag' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      vendorId: [Object],
      deviceId: [Object],
      name: [Object],
      noOrderFlag: [Object],
      deviceid: [Object]
    },
    tableAttributes: {
      id: [Object],
      vendorId: [Object],
      deviceId: [Object],
      name: [Object],
      noOrderFlag: [Object],
      deviceid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getByDeviceId: [Function],
    myAssociations: [ 'needPartParentUnit', 'instPartParentUnit' ]
  },
  needPartParentUnit: [Function: device] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'devices',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      parent: [BelongsTo],
      haveChildren: [HasMany],
      parentDevice: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'devices',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { parentId: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      name: [Object],
      parent_id: [Object],
      vendor_id: [Object]
    },
    fieldAttributeMap: { vendor_id: 'vendorId' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    tableAttributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getCompleteParents: [AsyncFunction],
    myAssociations: [ 'parentDevice' ]
  },
  currentStatus: [Function: status] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'needparts_status_name',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      next: [BelongsToMany],
      back: [BelongsToMany],
      nextStatus: [BelongsToMany]
    },
    underscored: undefined,
    tableName: 'needparts_status_name',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { name: [Function: wrapper] },
    fieldRawAttributesMap: { id: [Object], name: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: { id: [Object], name: [Object] },
    tableAttributes: { id: [Object], name: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [ 'nextStatus' ]
  },
  nextStatus: [Function: status] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'needparts_status_name',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      next: [BelongsToMany],
      back: [BelongsToMany],
      nextStatus: [BelongsToMany]
    },
    underscored: undefined,
    tableName: 'needparts_status_name',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { name: [Function: wrapper] },
    fieldRawAttributesMap: { id: [Object], name: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: { id: [Object], name: [Object] },
    tableAttributes: { id: [Object], name: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [ 'nextStatus' ]
  },
  instPart: [Function: instPart] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'instparts',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      user: [BelongsTo],
      unit: [BelongsTo],
      ticket: [BelongsTo],
      tickets: [BelongsToMany],
      instPartUser: [BelongsTo],
      instPartUnit: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'instparts',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      type: [Object],
      needPartId: [Object],
      ticketId: [Object],
      userId: [Object],
      name: [Object],
      number: [Object],
      quantity: [Object],
      unitId: [Object],
      appendTime: [Object],
      comment: [Object],
      perm: [Object],
      userid: [Object],
      unitid: [Object],
      orderid: [Object],
      need_part_id: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: { appendTime: [Function: _isChanged] },
    _dataTypeSanitizers: { appendTime: [Function: _sanitize] },
    _booleanAttributes: [],
    _dateAttributes: [ 'appendTime' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      type: [Function: wrapper],
      needPartId: [Function: wrapper],
      number: [Function: wrapper],
      appendTime: [Function: wrapper],
      comment: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      part_type: [Object],
      need_part_id: [Object],
      orderid: [Object],
      userid: [Object],
      partname: [Object],
      partnumber: [Object],
      quantity: [Object],
      unitid: [Object],
      append_time: [Object],
      comment: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      part_type: 'type',
      partname: 'name',
      partnumber: 'number',
      append_time: 'appendTime'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      type: [Object],
      needPartId: [Object],
      ticketId: [Object],
      userId: [Object],
      name: [Object],
      number: [Object],
      quantity: [Object],
      unitId: [Object],
      appendTime: [Object],
      comment: [Object],
      perm: [Object],
      userid: [Object],
      unitid: [Object],
      orderid: [Object],
      need_part_id: [Object]
    },
    tableAttributes: {
      id: [Object],
      type: [Object],
      needPartId: [Object],
      ticketId: [Object],
      userId: [Object],
      name: [Object],
      number: [Object],
      quantity: [Object],
      unitId: [Object],
      appendTime: [Object],
      comment: [Object],
      userid: [Object],
      unitid: [Object],
      orderid: [Object],
      need_part_id: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getAll: [AsyncFunction],
    getById: [Function],
    tryCreate: [AsyncFunction],
    tryUpdate: [AsyncFunction],
    tryDelete: [AsyncFunction],
    myAssociations: [ 'instPartUser', 'instPartUnit', 'tickets' ]
  },
  instPartUser: [Function: user] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'users',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { city: [BelongsTo], department: [BelongsTo] },
    underscored: undefined,
    tableName: 'users',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: { blocked: [Function: _sanitize] },
    _booleanAttributes: [ 'blocked' ],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      deputyId: [Function: wrapper],
      cityId: [Function: wrapper],
      name: [Function: wrapper],
      login: [Function: wrapper],
      password: [Function: wrapper],
      departmentId: [Function: wrapper],
      email: [Function: wrapper],
      blocked: [Function: wrapper],
      hash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      deputy_id: [Object],
      city_id: [Object],
      name: [Object],
      username: [Object],
      password: [Object],
      departmentid: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object]
    },
    fieldAttributeMap: { deputy_id: 'deputyId', username: 'login' },
    uniqueKeys: {},
    _hasBooleanAttributes: true,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    tableAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    RoleValues: {
      noUser: -1,
      unset: 0,
      director: 1,
      engineer: 2,
      headOfDepartment: 3,
      seniorEngineer: 4,
      coordinator: 5,
      seniorCoordinator: 6,
      administrator: 7,
      regionalManager: 8
    },
    getUserRole: [AsyncFunction],
    getUserRoleId: [AsyncFunction],
    autorize: [AsyncFunction],
    getByParams: [AsyncFunction]
  },
  instPartUnit: [Function: unit] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'partnames',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      parent: [BelongsTo],
      instPartParentUnit: [BelongsTo],
      needPartParentUnit: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'partnames',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      vendorId: [Object],
      deviceId: [Object],
      name: [Object],
      noOrderFlag: [Object],
      deviceid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { noOrderFlag: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      vendorid: [Object],
      deviceid: [Object],
      name: [Object],
      no_order_flag: [Object]
    },
    fieldAttributeMap: { vendorid: 'vendorId', no_order_flag: 'noOrderFlag' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      vendorId: [Object],
      deviceId: [Object],
      name: [Object],
      noOrderFlag: [Object],
      deviceid: [Object]
    },
    tableAttributes: {
      id: [Object],
      vendorId: [Object],
      deviceId: [Object],
      name: [Object],
      noOrderFlag: [Object],
      deviceid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getByDeviceId: [Function],
    myAssociations: [ 'needPartParentUnit', 'instPartParentUnit' ]
  },
  instPartParentUnit: [Function: device] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'part_devices',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { children: [HasMany] },
    underscored: undefined,
    tableName: 'part_devices',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {},
    fieldRawAttributesMap: { id: [Object], name: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: false,
    attributes: { id: [Object], name: [Object] },
    tableAttributes: { id: [Object], name: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getAll: [Function],
    getByVendorId: [Function]
  },
  tickets: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ]
  },
  history: [Function: ticketHistory] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orderstatus',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      owner: [BelongsTo],
      serviceType: [BelongsTo],
      historyStatus: [BelongsTo],
      historyPerformer: [BelongsTo],
      historyOwner: [BelongsTo],
      historyServiceType: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'orderstatus',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      ticketId: [Object],
      statusId: [Object],
      serviceTypeId: [Object],
      ownerId: [Object],
      performerId: [Object],
      date: [Object],
      statusid: [Object],
      performerid: [Object],
      ownerid: [Object],
      servicetypeid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: { date: [Function: _isChanged] },
    _dataTypeSanitizers: { date: [Function: _sanitize] },
    _booleanAttributes: [],
    _dateAttributes: [ 'date' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      ownerId: [Function: wrapper],
      performerId: [Function: wrapper],
      date: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      orderid: [Object],
      statusid: [Object],
      servicetypeid: [Object],
      ownerid: [Object],
      performerid: [Object],
      statustime: [Object]
    },
    fieldAttributeMap: { orderid: 'ticketId', statustime: 'date' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      ticketId: [Object],
      statusId: [Object],
      serviceTypeId: [Object],
      ownerId: [Object],
      performerId: [Object],
      date: [Object],
      statusid: [Object],
      performerid: [Object],
      ownerid: [Object],
      servicetypeid: [Object]
    },
    tableAttributes: {
      id: [Object],
      ticketId: [Object],
      statusId: [Object],
      serviceTypeId: [Object],
      ownerId: [Object],
      performerId: [Object],
      date: [Object],
      statusid: [Object],
      performerid: [Object],
      ownerid: [Object],
      servicetypeid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getAll: [Function],
    getClosed: [Function],
    transactionAddHistory: [Function],
    myAssociations: [
      'historyStatus',
      'historyPerformer',
      'historyOwner',
      'historyServiceType'
    ]
  },
  historyStatus: [Function: status] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'status',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'status',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object], final: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { final: [Function: wrapper] },
    fieldRawAttributesMap: { id: [Object], name: [Object], final: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: { id: [Object], name: [Object], final: [Object] },
    tableAttributes: { id: [Object], name: [Object], final: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: {
      registered: 1,
      appointed: 3,
      partWaiting: 4,
      handled: 5,
      customerWaiting: 6,
      closed: 7,
      annuled: 19,
      custRefused: 20,
      underway: 22,
      compensation: 25,
      cancelled: 28,
      shipped: 29,
      available: 30
    },
    getNextStatus: [Function]
  },
  historyPerformer: [Function: user] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'users',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { city: [BelongsTo], department: [BelongsTo] },
    underscored: undefined,
    tableName: 'users',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: { blocked: [Function: _sanitize] },
    _booleanAttributes: [ 'blocked' ],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      deputyId: [Function: wrapper],
      cityId: [Function: wrapper],
      name: [Function: wrapper],
      login: [Function: wrapper],
      password: [Function: wrapper],
      departmentId: [Function: wrapper],
      email: [Function: wrapper],
      blocked: [Function: wrapper],
      hash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      deputy_id: [Object],
      city_id: [Object],
      name: [Object],
      username: [Object],
      password: [Object],
      departmentid: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object]
    },
    fieldAttributeMap: { deputy_id: 'deputyId', username: 'login' },
    uniqueKeys: {},
    _hasBooleanAttributes: true,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    tableAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    RoleValues: {
      noUser: -1,
      unset: 0,
      director: 1,
      engineer: 2,
      headOfDepartment: 3,
      seniorEngineer: 4,
      coordinator: 5,
      seniorCoordinator: 6,
      administrator: 7,
      regionalManager: 8
    },
    getUserRole: [AsyncFunction],
    getUserRoleId: [AsyncFunction],
    autorize: [AsyncFunction],
    getByParams: [AsyncFunction]
  },
  historyOwner: [Function: user] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'users',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { city: [BelongsTo], department: [BelongsTo] },
    underscored: undefined,
    tableName: 'users',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: { blocked: [Function: _sanitize] },
    _booleanAttributes: [ 'blocked' ],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      deputyId: [Function: wrapper],
      cityId: [Function: wrapper],
      name: [Function: wrapper],
      login: [Function: wrapper],
      password: [Function: wrapper],
      departmentId: [Function: wrapper],
      email: [Function: wrapper],
      blocked: [Function: wrapper],
      hash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      deputy_id: [Object],
      city_id: [Object],
      name: [Object],
      username: [Object],
      password: [Object],
      departmentid: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object]
    },
    fieldAttributeMap: { deputy_id: 'deputyId', username: 'login' },
    uniqueKeys: {},
    _hasBooleanAttributes: true,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    tableAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    RoleValues: {
      noUser: -1,
      unset: 0,
      director: 1,
      engineer: 2,
      headOfDepartment: 3,
      seniorEngineer: 4,
      coordinator: 5,
      seniorCoordinator: 6,
      administrator: 7,
      regionalManager: 8
    },
    getUserRole: [AsyncFunction],
    getUserRoleId: [AsyncFunction],
    autorize: [AsyncFunction],
    getByParams: [AsyncFunction]
  },
  historyServiceType: [Function: serviceType] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'servicetype',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {},
    underscored: undefined,
    tableName: 'servicetype',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: { id: [Object], name: [Object] },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {},
    fieldRawAttributesMap: { id: [Object], name: [Object] },
    fieldAttributeMap: {},
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: false,
    attributes: { id: [Object], name: [Object] },
    tableAttributes: { id: [Object], name: [Object] },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    Values: { repair: 3, supply: 9 },
    getAvailable: [Function]
  },
  comment: [Function: comment] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: [Object],
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'comments',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      user: [BelongsTo],
      device: [BelongsTo],
      ticket: [BelongsTo],
      commentUser: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'comments',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      ticketId: [Object],
      ownerId: [Object],
      deviceId: [Object],
      date: [Object],
      text: [Object],
      type: [Object],
      perm: [Object],
      ownerid: [Object],
      device_id: [Object],
      orderid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: { date: [Function: _isChanged] },
    _dataTypeSanitizers: { date: [Function: _sanitize] },
    _booleanAttributes: [],
    _dateAttributes: [ 'date' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      ownerId: [Function: wrapper],
      deviceId: [Function: wrapper],
      date: [Function: wrapper],
      type: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      orderid: [Object],
      ownerid: [Object],
      device_id: [Object],
      commentdate: [Object],
      comment: [Object],
      comment_type: [Object],
      perm: [Object]
    },
    fieldAttributeMap: { commentdate: 'date', comment: 'text', comment_type: 'type' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      ticketId: [Object],
      ownerId: [Object],
      deviceId: [Object],
      date: [Object],
      text: [Object],
      type: [Object],
      perm: [Object],
      ownerid: [Object],
      device_id: [Object],
      orderid: [Object]
    },
    tableAttributes: {
      id: [Object],
      ticketId: [Object],
      ownerId: [Object],
      deviceId: [Object],
      date: [Object],
      text: [Object],
      type: [Object],
      ownerid: [Object],
      device_id: [Object],
      orderid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getParams: [AsyncFunction],
    getCounts: [Function],
    getByType: [AsyncFunction],
    getById: [AsyncFunction],
    tryCreate: [AsyncFunction],
    tryUpdate: [AsyncFunction],
    tryDelete: [AsyncFunction],
    transactionAddComment: [AsyncFunction],
    myAssociations: [ 'commentUser', 'device' ]
  },
  commentUser: [Function: user] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'users',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: { city: [BelongsTo], department: [BelongsTo] },
    underscored: undefined,
    tableName: 'users',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: { blocked: [Function: _sanitize] },
    _booleanAttributes: [ 'blocked' ],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: {
      deputyId: [Function: wrapper],
      cityId: [Function: wrapper],
      name: [Function: wrapper],
      login: [Function: wrapper],
      password: [Function: wrapper],
      departmentId: [Function: wrapper],
      email: [Function: wrapper],
      blocked: [Function: wrapper],
      hash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      deputy_id: [Object],
      city_id: [Object],
      name: [Object],
      username: [Object],
      password: [Object],
      departmentid: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object]
    },
    fieldAttributeMap: { deputy_id: 'deputyId', username: 'login' },
    uniqueKeys: {},
    _hasBooleanAttributes: true,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    tableAttributes: {
      id: [Object],
      deputyId: [Object],
      cityId: [Object],
      name: [Object],
      login: [Object],
      password: [Object],
      departmentId: [Object],
      email: [Object],
      blocked: [Object],
      hash: [Object],
      city_id: [Object],
      departmentid: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    RoleValues: {
      noUser: -1,
      unset: 0,
      director: 1,
      engineer: 2,
      headOfDepartment: 3,
      seniorEngineer: 4,
      coordinator: 5,
      seniorCoordinator: 6,
      administrator: 7,
      regionalManager: 8
    },
    getUserRole: [AsyncFunction],
    getUserRoleId: [AsyncFunction],
    autorize: [AsyncFunction],
    getByParams: [AsyncFunction]
  },
  device: [Function: device] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'devices',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      parent: [BelongsTo],
      haveChildren: [HasMany],
      parentDevice: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'devices',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { parentId: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      name: [Object],
      parent_id: [Object],
      vendor_id: [Object]
    },
    fieldAttributeMap: { vendor_id: 'vendorId' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    tableAttributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getCompleteParents: [AsyncFunction],
    myAssociations: [ 'parentDevice' ]
  },
  parentDevice: [Function: device] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'devices',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      parent: [BelongsTo],
      haveChildren: [HasMany],
      parentDevice: [BelongsTo]
    },
    underscored: undefined,
    tableName: 'devices',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {},
    _dataTypeSanitizers: {},
    _booleanAttributes: [],
    _dateAttributes: [],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [],
    _defaultValues: { parentId: [Function: wrapper] },
    fieldRawAttributesMap: {
      id: [Object],
      name: [Object],
      parent_id: [Object],
      vendor_id: [Object]
    },
    fieldAttributeMap: { vendor_id: 'vendorId' },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: false,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: false,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    tableAttributes: {
      id: [Object],
      name: [Object],
      parentId: [Object],
      vendorId: [Object],
      parent_id: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    getCompleteParents: [AsyncFunction],
    myAssociations: [ 'parentDevice' ]
  }
}
[2019-07-18 13:24:21.532] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/cities?checksum=0
[2019-07-18 13:24:21.566] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/service-types?checksum=0
[2019-07-18 13:24:21.619] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/statuses?checksum=0
[2019-07-18 13:24:21.640] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/types?checksum=0
[2019-07-18 13:24:21.658] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/vendors?checksum=0
[2019-07-18 13:24:21.669] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/devices?checksum=0
[2019-07-18 13:24:21.685] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/users
[2019-07-18 13:24:21.687] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getByParams
[2019-07-18 13:24:21.835] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.836] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `status`; 4ms
[2019-07-18 13:24:21.837] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.837] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `servicetype`; 7ms
[2019-07-18 13:24:21.838] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.838] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `city`; 8ms
[2019-07-18 13:24:21.842] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.842] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `ordertype`; 10ms
[2019-07-18 13:24:21.853] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.859] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `vendors`; 20ms
[2019-07-18 13:24:21.863] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 832200969
[2019-07-18 13:24:21.887] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 2129809734
[2019-07-18 13:24:21.893] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 469028310
[2019-07-18 13:24:21.898] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.902] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `devices`; 58ms
[2019-07-18 13:24:21.920] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.921] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `users` AS `user` WHERE `user`.`blocked` = 0 AND `user`.`name` != 'Administrator' ORDER BY `user`.`name`; 79ms
[2019-07-18 13:24:21.935] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 797875960
[2019-07-18 13:24:21.937] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 1168970086
[2019-07-18 13:24:21.945] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 3672458130
[2019-07-18 13:24:21.960] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/users 200 275ms 11.29kb
[2019-07-18 13:24:21.966] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.970] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `servicetype` AS `serviceType` WHERE 1=1 ORDER BY `serviceType`.`name`; 32ms
[2019-07-18 13:24:21.973] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.974] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `status` AS `status` WHERE 1=1 ORDER BY `status`.`name`; 40ms
[2019-07-18 13:24:21.976] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:21.981] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `city` AS `city` WHERE 1=1 ORDER BY `city`.`name`; 42ms
[2019-07-18 13:24:21.992] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:22.002] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `ordertype` AS `type` WHERE 1=1 ORDER BY `type`.`name`; 48ms
[2019-07-18 13:24:22.006] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:22.007] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `vendors` AS `vendor` WHERE 1=1 ORDER BY `vendor`.`name`; 61ms
[2019-07-18 13:24:22.014] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/service-types?checksum=0 200 448ms 692b
[2019-07-18 13:24:22.016] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/statuses?checksum=0 200 397ms 1.28kb
[2019-07-18 13:24:22.018] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/cities?checksum=0 200 485ms 1.13kb
[2019-07-18 13:24:22.047] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:22.051] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name`, `parent_id` AS `parentId`, `vendor_id` AS `vendorId` FROM `devices` AS `device` WHERE 1=1 ORDER BY `device`.`name`; 56ms
[2019-07-18 13:24:22.084] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/types?checksum=0 200 444ms 674b
[2019-07-18 13:24:22.085] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/vendors?checksum=0 200 427ms 1.66kb
[2019-07-18 13:24:22.100] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/devices?checksum=0 200 431ms 34.54kb
[2019-07-18 13:24:22.213] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1
[2019-07-18 13:24:22.216] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 13:24:22.216] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 13:24:22.219] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 13:24:22.220] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 13:24:22.220] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 13:24:22.222] [Level { level: 20000, levelStr: 'INFO' }] [default] - getAll_DualSearch
[2019-07-18 13:24:22.222] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true },
    { as: 'performer', model: [Function] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { attributes: [], model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] },
    { include: [Array], separate: true, model: [Function] },
    {
      include: [Array],
      as: 'history',
      separate: true,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ]
  ]
}
