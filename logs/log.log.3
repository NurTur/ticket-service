[2019-07-18 14:03:33.356] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1 200 317ms 121.28kb
[2019-07-18 14:03:37.692] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=496999&userId=1
[2019-07-18 14:03:37.698] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:37.702] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:37.702] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 14:03:37.707] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:37.766] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:37.771] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '496999'; 20ms
[2019-07-18 14:03:37.783] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=496999&userId=1 200 91ms 291b
[2019-07-18 14:03:37.881] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=496999
[2019-07-18 14:03:37.899] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:37.900] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '496999' ORDER BY `ticketHistory`.`statustime` ASC; 7ms
[2019-07-18 14:03:37.923] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=496999 200 42ms 1.31kb
[2019-07-18 14:03:38.005] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/496999?userId=1
[2019-07-18 14:03:38.006] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:38.010] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:38.010] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('496999') AS `id`; 2ms
[2019-07-18 14:03:38.011] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:38.011] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:38.013] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:38.013] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:38.014] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:38.020] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:38.020] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '496999'; 2ms
[2019-07-18 14:03:38.023] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:38.024] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496999,
  number: 'D21814M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2346
}
[2019-07-18 14:03:38.025] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:38.025] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496999,
  number: 'D21814M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2346
}
[2019-07-18 14:03:38.031] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:38.031] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 496999; 2ms
[2019-07-18 14:03:38.033] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/496999?userId=1 200 28ms 579b
[2019-07-18 14:03:39.180] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=496998&userId=1
[2019-07-18 14:03:39.181] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:39.184] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:39.185] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 14:03:39.186] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:39.233] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:39.236] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '496998'; 2ms
[2019-07-18 14:03:39.242] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=496998&userId=1 200 62ms 291b
[2019-07-18 14:03:39.316] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=496998
[2019-07-18 14:03:39.322] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:39.323] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '496998' ORDER BY `ticketHistory`.`statustime` ASC; 1ms
[2019-07-18 14:03:39.325] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=496998 200 9ms 1.31kb
[2019-07-18 14:03:39.359] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/496998?userId=1
[2019-07-18 14:03:39.360] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:39.363] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:39.363] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('496998') AS `id`; 2ms
[2019-07-18 14:03:39.364] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:39.365] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:39.368] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:39.370] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 14:03:39.371] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:39.382] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:39.383] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '496998'; 3ms
[2019-07-18 14:03:39.385] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:39.388] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496998,
  number: 'D21813M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2365
}
[2019-07-18 14:03:39.388] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:39.389] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 496998,
  number: 'D21813M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2365
}
[2019-07-18 14:03:39.392] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:39.392] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 496998; 1ms
[2019-07-18 14:03:39.394] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/496998?userId=1 200 35ms 579b
[2019-07-18 14:03:40.334] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497000&userId=1
[2019-07-18 14:03:40.336] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:40.339] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:40.340] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 14:03:40.359] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:40.376] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:40.377] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497000'; 1ms
[2019-07-18 14:03:40.380] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497000&userId=1 200 46ms 291b
[2019-07-18 14:03:40.426] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497000
[2019-07-18 14:03:40.434] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:40.437] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497000' ORDER BY `ticketHistory`.`statustime` ASC; 4ms
[2019-07-18 14:03:40.440] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497000 200 14ms 946b
[2019-07-18 14:03:40.495] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497000?userId=1
[2019-07-18 14:03:40.496] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:40.498] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:40.499] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497000') AS `id`; 1ms
[2019-07-18 14:03:40.500] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:40.500] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:40.502] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:40.502] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:40.503] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:40.509] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:40.510] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497000'; 2ms
[2019-07-18 14:03:40.513] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:40.513] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497000,
  number: 'D21815M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 39,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2642
}
[2019-07-18 14:03:40.514] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:40.514] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497000,
  number: 'D21815M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 39,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2642
}
[2019-07-18 14:03:40.523] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:40.523] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497000; 3ms
[2019-07-18 14:03:40.526] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497000?userId=1 200 31ms 578b
[2019-07-18 14:03:41.227] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497001&userId=1
[2019-07-18 14:03:41.231] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:41.233] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:41.233] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:41.234] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:41.246] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:41.249] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497001'; 2ms
[2019-07-18 14:03:41.253] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497001&userId=1 200 26ms 291b
[2019-07-18 14:03:41.297] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497001
[2019-07-18 14:03:41.306] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:41.307] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497001' ORDER BY `ticketHistory`.`statustime` ASC; 6ms
[2019-07-18 14:03:41.311] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497001 200 14ms 1.31kb
[2019-07-18 14:03:41.344] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497001?userId=1
[2019-07-18 14:03:41.344] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:41.346] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:41.347] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497001') AS `id`; 1ms
[2019-07-18 14:03:41.347] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:41.348] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:41.350] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:41.353] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:41.355] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:41.361] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:41.362] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497001'; 2ms
[2019-07-18 14:03:41.363] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:41.363] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497001,
  number: 'D21816M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 3314
}
[2019-07-18 14:03:41.364] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:41.365] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497001,
  number: 'D21816M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 3314
}
[2019-07-18 14:03:41.375] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:41.376] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497001; 6ms
[2019-07-18 14:03:41.378] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497001?userId=1 200 34ms 579b
[2019-07-18 14:03:43.294] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497004&userId=1
[2019-07-18 14:03:43.295] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:43.296] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:43.296] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:43.297] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:43.307] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:43.308] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497004'; 2ms
[2019-07-18 14:03:43.311] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497004&userId=1 200 17ms 291b
[2019-07-18 14:03:43.358] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497004
[2019-07-18 14:03:43.363] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:43.363] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497004' ORDER BY `ticketHistory`.`statustime` ASC; 2ms
[2019-07-18 14:03:43.366] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497004 200 8ms 1.31kb
[2019-07-18 14:03:43.408] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497004?userId=1
[2019-07-18 14:03:43.408] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:43.410] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:43.411] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497004') AS `id`; 1ms
[2019-07-18 14:03:43.430] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:43.431] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:43.433] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:43.433] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:43.434] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:43.439] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:43.439] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497004'; 1ms
[2019-07-18 14:03:43.440] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:43.440] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497004,
  number: 'D21819M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2979
}
[2019-07-18 14:03:43.441] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:43.441] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497004,
  number: 'D21819M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2979
}
[2019-07-18 14:03:43.445] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:43.445] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497004; 2ms
[2019-07-18 14:03:43.448] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497004?userId=1 200 40ms 579b
[2019-07-18 14:03:45.093] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497013&userId=1
[2019-07-18 14:03:45.094] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:45.097] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.098] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 14:03:45.099] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:45.108] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.108] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497013'; 2ms
[2019-07-18 14:03:45.110] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497013&userId=1 200 17ms 291b
[2019-07-18 14:03:45.152] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497013
[2019-07-18 14:03:45.163] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.164] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497013' ORDER BY `ticketHistory`.`statustime` ASC; 4ms
[2019-07-18 14:03:45.166] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497013 200 14ms 1.31kb
[2019-07-18 14:03:45.202] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497013?userId=1
[2019-07-18 14:03:45.203] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:45.205] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.206] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497013') AS `id`; 1ms
[2019-07-18 14:03:45.206] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:45.207] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:45.210] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.211] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 2ms
[2019-07-18 14:03:45.212] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:45.217] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.217] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497013'; 2ms
[2019-07-18 14:03:45.221] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:45.221] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497013,
  number: 'D21827M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2638
}
[2019-07-18 14:03:45.223] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:45.240] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497013,
  number: 'D21827M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2638
}
[2019-07-18 14:03:45.243] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.243] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497013; 1ms
[2019-07-18 14:03:45.245] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497013?userId=1 200 43ms 579b
[2019-07-18 14:03:45.959] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497014&userId=1
[2019-07-18 14:03:45.959] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:45.961] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.961] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:45.962] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:45.973] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:45.986] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497014'; 3ms
[2019-07-18 14:03:45.988] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497014&userId=1 200 29ms 291b
[2019-07-18 14:03:46.026] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497014
[2019-07-18 14:03:46.030] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.031] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497014' ORDER BY `ticketHistory`.`statustime` ASC; 1ms
[2019-07-18 14:03:46.033] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497014 200 7ms 1.31kb
[2019-07-18 14:03:46.067] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497014?userId=1
[2019-07-18 14:03:46.068] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:46.072] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.072] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497014') AS `id`; 3ms
[2019-07-18 14:03:46.073] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:46.076] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:46.078] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.079] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:46.081] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:46.088] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.089] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497014'; 3ms
[2019-07-18 14:03:46.090] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:46.091] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497014,
  number: 'D21829M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2654
}
[2019-07-18 14:03:46.092] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:46.094] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497014,
  number: 'D21829M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2654
}
[2019-07-18 14:03:46.103] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.105] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497014; 2ms
[2019-07-18 14:03:46.108] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497014?userId=1 200 41ms 579b
[2019-07-18 14:03:46.499] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497015&userId=1
[2019-07-18 14:03:46.500] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:46.502] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.502] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:46.503] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:46.512] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.513] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497015'; 1ms
[2019-07-18 14:03:46.515] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497015&userId=1 200 16ms 291b
[2019-07-18 14:03:46.550] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497015
[2019-07-18 14:03:46.556] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.556] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497015' ORDER BY `ticketHistory`.`statustime` ASC; 2ms
[2019-07-18 14:03:46.558] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497015 200 8ms 1.31kb
[2019-07-18 14:03:46.604] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497015?userId=1
[2019-07-18 14:03:46.604] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:46.606] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.606] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497015') AS `id`; 1ms
[2019-07-18 14:03:46.607] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:46.607] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:46.609] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.610] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:46.610] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:46.619] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.630] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497015'; 3ms
[2019-07-18 14:03:46.632] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:46.634] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497015,
  number: 'D21831M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 260,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2448
}
[2019-07-18 14:03:46.638] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:46.638] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497015,
  number: 'D21831M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 260,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2448
}
[2019-07-18 14:03:46.644] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:46.645] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497015; 2ms
[2019-07-18 14:03:46.647] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497015?userId=1 200 43ms 579b
[2019-07-18 14:03:47.896] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497018&userId=1
[2019-07-18 14:03:47.897] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:47.898] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:47.899] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 0ms
[2019-07-18 14:03:47.899] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:47.914] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:47.926] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497018'; 4ms
[2019-07-18 14:03:47.928] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497018&userId=1 200 32ms 291b
[2019-07-18 14:03:47.967] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497018
[2019-07-18 14:03:47.974] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:47.975] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497018' ORDER BY `ticketHistory`.`statustime` ASC; 2ms
[2019-07-18 14:03:47.977] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497018 200 10ms 1.31kb
[2019-07-18 14:03:48.015] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497018?userId=1
[2019-07-18 14:03:48.015] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:48.018] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.020] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497018') AS `id`; 2ms
[2019-07-18 14:03:48.021] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:48.022] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:48.025] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.042] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:48.043] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:48.046] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.047] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497018'; 1ms
[2019-07-18 14:03:48.048] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:48.048] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497018,
  number: 'D21834M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2799
}
[2019-07-18 14:03:48.049] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:48.049] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497018,
  number: 'D21834M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 119,
  commonFieldString: null,
  cityId: 2,
  serialNumber: null,
  equipmentId: 2799
}
[2019-07-18 14:03:48.055] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.055] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497018; 4ms
[2019-07-18 14:03:48.057] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497018?userId=1 200 42ms 579b
[2019-07-18 14:03:48.598] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497019&userId=1
[2019-07-18 14:03:48.600] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:48.602] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.603] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:48.604] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:48.641] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.642] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497019'; 6ms
[2019-07-18 14:03:48.644] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497019&userId=1 200 46ms 292b
[2019-07-18 14:03:48.682] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497019
[2019-07-18 14:03:48.688] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.689] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497019' ORDER BY `ticketHistory`.`statustime` ASC; 1ms
[2019-07-18 14:03:48.691] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497019 200 9ms 916b
[2019-07-18 14:03:48.742] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497019?userId=1
[2019-07-18 14:03:48.743] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:48.748] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.748] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497019') AS `id`; 4ms
[2019-07-18 14:03:48.749] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:48.749] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:48.759] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.759] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 8ms
[2019-07-18 14:03:48.760] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:48.771] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.772] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497019'; 5ms
[2019-07-18 14:03:48.775] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:48.776] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497019,
  number: 'W4610M',
  typeId: 1,
  statusId: 3,
  vendorId: 7,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 54,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 19650
}
[2019-07-18 14:03:48.776] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:48.777] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497019,
  number: 'W4610M',
  typeId: 1,
  statusId: 3,
  vendorId: 7,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 54,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 19650
}
[2019-07-18 14:03:48.781] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:48.782] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497019; 2ms
[2019-07-18 14:03:48.783] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497019?userId=1 200 41ms 578b
[2019-07-18 14:03:49.125] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497020&userId=1
[2019-07-18 14:03:49.126] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:49.128] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:49.128] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:49.129] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:49.138] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:49.139] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497020'; 1ms
[2019-07-18 14:03:49.143] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497020&userId=1 200 18ms 292b
[2019-07-18 14:03:49.180] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497020
[2019-07-18 14:03:49.184] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:49.184] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497020' ORDER BY `ticketHistory`.`statustime` ASC; 2ms
[2019-07-18 14:03:49.188] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497020 200 8ms 1.28kb
[2019-07-18 14:03:49.222] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497020?userId=1
[2019-07-18 14:03:49.223] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:49.224] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:49.225] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497020') AS `id`; 1ms
[2019-07-18 14:03:49.225] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:49.226] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:49.227] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:49.228] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:49.229] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:49.234] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:49.235] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497020'; 2ms
[2019-07-18 14:03:49.237] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:49.238] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497020,
  number: 'D21835MW',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 9505,
  serviceTypeId: 1,
  performerId: 174,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 24423
}
[2019-07-18 14:03:49.239] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:49.239] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497020,
  number: 'D21835MW',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 9505,
  serviceTypeId: 1,
  performerId: 174,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 24423
}
[2019-07-18 14:03:49.244] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:49.245] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497020; 1ms
[2019-07-18 14:03:49.247] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497020?userId=1 200 25ms 584b
[2019-07-18 14:03:50.564] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497028&userId=1
[2019-07-18 14:03:50.565] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:50.567] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:50.567] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 0ms
[2019-07-18 14:03:50.567] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:50.597] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:50.597] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497028'; 2ms
[2019-07-18 14:03:50.600] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497028&userId=1 200 36ms 292b
[2019-07-18 14:03:50.638] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497028
[2019-07-18 14:03:50.644] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:50.645] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497028' ORDER BY `ticketHistory`.`statustime` ASC; 3ms
[2019-07-18 14:03:50.648] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497028 200 10ms 1.27kb
[2019-07-18 14:03:50.682] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497028?userId=1
[2019-07-18 14:03:50.683] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:50.687] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:50.688] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497028') AS `id`; 3ms
[2019-07-18 14:03:50.690] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:50.712] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:50.730] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:50.731] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 17ms
[2019-07-18 14:03:50.732] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:50.741] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:50.742] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497028'; 3ms
[2019-07-18 14:03:50.743] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:50.743] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497028,
  number: 'D21844M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 251,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 1856
}
[2019-07-18 14:03:50.744] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:50.744] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497028,
  number: 'D21844M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 251,
  commonFieldString: null,
  cityId: 1,
  serialNumber: null,
  equipmentId: 1856
}
[2019-07-18 14:03:50.748] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:50.748] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497028; 1ms
[2019-07-18 14:03:50.750] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497028?userId=1 200 68ms 579b
[2019-07-18 14:03:51.340] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497027&userId=1
[2019-07-18 14:03:51.341] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:51.343] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.344] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:51.345] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:51.354] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.355] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497027'; 1ms
[2019-07-18 14:03:51.358] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497027&userId=1 200 18ms 291b
[2019-07-18 14:03:51.407] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497027
[2019-07-18 14:03:51.415] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.415] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497027' ORDER BY `ticketHistory`.`statustime` ASC; 4ms
[2019-07-18 14:03:51.418] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497027 200 11ms 934b
[2019-07-18 14:03:51.454] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497027?userId=1
[2019-07-18 14:03:51.455] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:51.458] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.461] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497027') AS `id`; 1ms
[2019-07-18 14:03:51.464] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:51.466] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:51.489] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.490] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:51.490] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:51.495] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.495] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '497027'; 1ms
[2019-07-18 14:03:51.496] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:51.497] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497027,
  number: 'D21843M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 70,
  commonFieldString: null,
  cityId: 12,
  serialNumber: null,
  equipmentId: 2669
}
[2019-07-18 14:03:51.498] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:51.498] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 1,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 497027,
  number: 'D21843M',
  typeId: 1,
  statusId: 3,
  vendorId: 1,
  date: '2018-05-14',
  customerId: 1,
  serviceTypeId: 1,
  performerId: 70,
  commonFieldString: null,
  cityId: 12,
  serialNumber: null,
  equipmentId: 2669
}
[2019-07-18 14:03:51.501] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.504] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497027; 1ms
[2019-07-18 14:03:51.506] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497027?userId=1 200 52ms 579b
[2019-07-18 14:03:51.890] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497026&userId=1
[2019-07-18 14:03:51.891] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:51.893] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.893] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:51.894] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:51.923] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.924] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497026'; 1ms
[2019-07-18 14:03:51.926] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497026&userId=1 200 36ms 292b
[2019-07-18 14:03:51.964] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/ticket-history?ticketId=497026
[2019-07-18 14:03:51.973] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:51.974] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `ticketHistory`.`id`, `ticketHistory`.`statustime` AS `date`, `status`.`id` AS `status.id`, `status`.`name` AS `status.name`, `status`.`final` AS `status.final`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `owner`.`id` AS `owner.id`, `owner`.`name` AS `owner.name`, `serviceType`.`id` AS `serviceType.id`, `serviceType`.`name` AS `serviceType.name` FROM `orderstatus` AS `ticketHistory` LEFT OUTER JOIN `status` AS `status` ON `ticketHistory`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticketHistory`.`performerid` = `performer`.`id` LEFT OUTER JOIN `users` AS `owner` ON `ticketHistory`.`ownerid` = `owner`.`id` LEFT OUTER JOIN `servicetype` AS `serviceType` ON `ticketHistory`.`servicetypeid` = `serviceType`.`id` WHERE `ticketHistory`.`orderid` = '497026' ORDER BY `ticketHistory`.`statustime` ASC; 2ms
[2019-07-18 14:03:51.976] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/ticket-history?ticketId=497026 200 12ms 912b
[2019-07-18 14:03:52.008] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets/tree/497026?userId=1
[2019-07-18 14:03:52.009] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getTree
[2019-07-18 14:03:52.010] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:52.010] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `GetTopTicketId`('497026') AS `id`; 1ms
[2019-07-18 14:03:52.011] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:52.011] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:52.013] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:52.013] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:52.014] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:52.024] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:52.025] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`id` = '495497'; 8ms
[2019-07-18 14:03:52.045] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:52.045] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 0,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 495497,
  number: 'CMT1083M',
  typeId: 1,
  statusId: 4,
  vendorId: 13,
  date: '2018-05-05',
  customerId: 538,
  serviceTypeId: 5,
  performerId: 230,
  commonFieldString: null,
  cityId: 12,
  serialNumber: null,
  equipmentId: 25690
}
[2019-07-18 14:03:52.046] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:52.046] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  'perm--serviceType': 0,
  'perm--setPerformer': 1,
  'perm--comment': 1,
  'perm--status': 1,
  'perm--partOrder--needPart--addition': 1,
  'perm--partOrder--generalPart--addition': 0,
  'perm--partOrder--generalPart--editing': 0,
  'perm--instPart--addition': 1,
  id: 495497,
  number: 'CMT1083M',
  typeId: 1,
  statusId: 4,
  vendorId: 13,
  date: '2018-05-05',
  customerId: 538,
  serviceTypeId: 5,
  performerId: 230,
  commonFieldString: null,
  cityId: 12,
  serialNumber: null,
  equipmentId: 25690
}
[2019-07-18 14:03:52.050] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:52.051] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 495497; 1ms
[2019-07-18 14:03:52.056] [Level { level: 20000, levelStr: 'INFO' }] [default] - buildTree
[2019-07-18 14:03:52.057] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [
  {
    id: 497026,
    number: 'CMT16Q',
    typeId: 5,
    statusId: 3,
    vendorId: 13,
    date: '2018-05-14',
    customerId: 538,
    serviceTypeId: 9,
    performerId: 145,
    commonFieldString: null,
    cityId: 12,
    serialNumber: null,
    equipmentId: null,
    perm: {
      serviceType: 1,
      setPerformer: 1,
      comment: 1,
      status: 1,
      partOrder: [Object],
      instPart: [Object]
    }
  }
]
[2019-07-18 14:03:52.058] [Level { level: 20000, levelStr: 'INFO' }] [default] - getChildren: 
[2019-07-18 14:03:52.059] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - {
  id: 497026,
  number: 'CMT16Q',
  typeId: 5,
  statusId: 3,
  vendorId: 13,
  date: '2018-05-14',
  customerId: 538,
  serviceTypeId: 9,
  performerId: 145,
  commonFieldString: null,
  cityId: 12,
  serialNumber: null,
  equipmentId: null,
  perm: {
    serviceType: 1,
    setPerformer: 1,
    comment: 1,
    status: 1,
    partOrder: { needPart: [Object], generalPart: [Object] },
    instPart: { addition: 0 }
  }
}
[2019-07-18 14:03:52.064] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:52.065] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`ordernumber` AS `number`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`statusid` AS `statusId`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`orderdate` AS `date`, `ticket`.`customerid` AS `customerId`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`performerid` AS `performerId`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`cityid` AS `cityId`, `ticket`.`serialnumber` AS `serialNumber`, `ticket`.`equipmentid` AS `equipmentId` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` WHERE `ticket`.`parentorderid` = 497026; 2ms
[2019-07-18 14:03:52.070] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets/tree/497026?userId=1 200 62ms 1.28kb
[2019-07-18 14:03:58.783] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/comments?ticketId=497026&userId=1
[2019-07-18 14:03:58.784] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:58.786] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:58.787] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 14:03:58.788] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:58.808] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:58.811] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `comment`.`id`, `comment`.`orderid` AS `ticketId`, `comment`.`ownerid` AS `ownerId`, `comment`.`device_id` AS `deviceId`, `comment`.`commentdate` AS `date`, `comment`.`comment` AS `text`, `comment`.`comment_type` AS `type`, IF(`ticket->status`.`final` = 1, 0, IF(`comment_type` NOT IN ('0', '1'), 0, IF(`comment`.`ownerid` = 1, 1, 0))) AS `perm.edit`, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `device`.`id` AS `device.id`, `device`.`name` AS `device.name`, `device->parent`.`id` AS `device.parent.id`, `device->parent`.`name` AS `device.parent.name` FROM `comments` AS `comment` LEFT OUTER JOIN `users` AS `user` ON `comment`.`ownerid` = `user`.`id` LEFT OUTER JOIN `devices` AS `device` ON `comment`.`device_id` = `device`.`id` LEFT OUTER JOIN `devices` AS `device->parent` ON `device`.`parent_id` = `device->parent`.`id` LEFT OUTER JOIN `orders` AS `ticket` ON `comment`.`orderid` = `ticket`.`id` LEFT OUTER JOIN `status` AS `ticket->status` ON `ticket`.`statusid` = `ticket->status`.`id` WHERE `comment`.`orderid` = '497026'; 2ms
[2019-07-18 14:03:58.813] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets?fields=%7B%22ticket%22%3A%5B%22archivedFlag%22%2C%22billDate%22%2C%22billNumber%22%2C%22blockNumber%22%2C%22cbsWarrantyFlag%22%2C%22checkedFlag%22%2C%22commonFieldString%22%2C%22date%22%2C%22description%22%2C%22detailsHash%22%2C%22diagPrice%22%2C%22failDescription%22%2C%22frozenFlag%22%2C%22hash%22%2C%22id%22%2C%22invoiceDate%22%2C%22number%22%2C%22numberFromCustomer%22%2C%22onceFlag%22%2C%22paidFlag%22%2C%22parentId%22%2C%22partName%22%2C%22partNumber%22%2C%22reasonDescription%22%2C%22repairPrice%22%2C%22retryFlag%22%2C%22serialNumber%22%2C%22subcontractorFlag%22%2C%22warrantyFlag%22%2C%22ownerId%22%5D%2C%22city%22%3A%5B%5D%2C%22contract%22%3A%5B%5D%2C%22customer%22%3A%5B%5D%2C%22customerContact%22%3A%5B%5D%2C%22customerPerson%22%3A%5B%5D%2C%22equipSupplier%22%3A%5B%5D%2C%22reason%22%3A%5B%5D%2C%22seller%22%3A%5B%5D%2C%22sellerPerson%22%3A%5B%5D%2C%22serviceType%22%3A%5B%5D%2C%22vendor%22%3A%5B%5D%2C%22status%22%3A%5B%22id%22%2C%22name%22%2C%7B%22next%22%3A%5B%5D%7D%5D%2C%22equipment%22%3A%5B%5D%2C%22equipmentType%22%3A%5B%5D%2C%22timeout%22%3A%5B%22timeout%22%2C%22reasonId%22%5D%2C%22timeoutReason%22%3A%5B%5D%7D&filters=%7B%22ticket%22%3A%7B%22id%22%3A%22497026%22%7D%7D&userId=1
[2019-07-18 14:03:58.833] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 14:03:58.833] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 14:03:58.835] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/comments?ticketId=497026&userId=1 200 52ms 292b
[2019-07-18 14:03:58.839] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:58.840] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 5ms
[2019-07-18 14:03:58.841] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 14:03:58.842] [Level { level: 20000, levelStr: 'INFO' }] [default] - getAll_DualSearch
[2019-07-18 14:03:58.843] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true },
    { as: 'performer', model: [Function] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { attributes: [], model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] },
    { include: [Array], separate: true, model: [Function] },
    {
      include: [Array],
      as: 'history',
      separate: true,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ]
  ]
}
[2019-07-18 14:03:58.859] [Level { level: 20000, levelStr: 'INFO' }] [default] - getSearch...
[2019-07-18 14:03:58.883] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [Object: null prototype] {
  fields: '{"ticket":["archivedFlag","billDate","billNumber","blockNumber","cbsWarrantyFlag","checkedFlag","commonFieldString","date","description","detailsHash","diagPrice","failDescription","frozenFlag","hash","id","invoiceDate","number","numberFromCustomer","onceFlag","paidFlag","parentId","partName","partNumber","reasonDescription","repairPrice","retryFlag","serialNumber","subcontractorFlag","warrantyFlag","ownerId"],"city":[],"contract":[],"customer":[],"customerContact":[],"customerPerson":[],"equipSupplier":[],"reason":[],"seller":[],"sellerPerson":[],"serviceType":[],"vendor":[],"status":["id","name",{"next":[]}],"equipment":[],"equipmentType":[],"timeout":["timeout","reasonId"],"timeoutReason":[]}',
  filters: '{"ticket":{"id":"497026"}}',
  userId: '1'
}
[2019-07-18 14:03:58.886] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - fastSearch:  {
  filters: { models: [ 'ticket' ], ticket: { id: '497026' } },
  fields: {
    models: [
               'ticket',            'city',
             'contract',        'customer',
      'customerContact',  'customerPerson',
        'equipSupplier',          'reason',
               'seller',    'sellerPerson',
          'serviceType',          'vendor',
                 'next',          'status',
            'equipment',   'equipmentType',
              'timeout',   'timeoutReason'
    ],
    timeoutReason: [],
    timeout: [ 'timeout', 'reasonId' ],
    equipmentType: [],
    equipment: [],
    status: [ 'id', 'name' ],
    next: [],
    vendor: [],
    serviceType: [],
    sellerPerson: [],
    seller: [],
    reason: [],
    equipSupplier: [],
    customerPerson: [],
    customerContact: [],
    customer: [],
    contract: [],
    city: [],
    ticket: [
           'archivedFlag',           'billDate',
             'billNumber',        'blockNumber',
        'cbsWarrantyFlag',        'checkedFlag',
      'commonFieldString',               'date',
            'description',        'detailsHash',
              'diagPrice',    'failDescription',
             'frozenFlag',               'hash',
                     'id',        'invoiceDate',
                 'number', 'numberFromCustomer',
               'onceFlag',           'paidFlag',
               'parentId',           'partName',
             'partNumber',  'reasonDescription',
            'repairPrice',          'retryFlag',
           'serialNumber',  'subcontractorFlag',
           'warrantyFlag',            'ownerId'
    ]
  }
}
[2019-07-18 14:03:58.889] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 14:03:58.889] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  filters: { models: [ 'ticket' ], ticket: { id: '497026' } },
  fields: { models: [ 'ticket' ], ticket: [ 'id' ] },
  checkedModels: [],
  order: []
}
[2019-07-18 14:03:58.890] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters { models: [ 'ticket' ], ticket: { id: '497026' } }
[2019-07-18 14:03:58.890] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  id ticket
[2019-07-18 14:03:58.891] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  []
[2019-07-18 14:03:58.892] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket' ]
[2019-07-18 14:03:58.892] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 14:03:58.892] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"filters":{"models":["ticket"],"ticket":{"id":"497026"}},"fields":{"models":["ticket"],"ticket":["id"]},"checkedModels":["ticket"],"order":[]}
[2019-07-18 14:03:58.893] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 14:03:58.894] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  []
[2019-07-18 14:03:58.894] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [],
  attributes: [ 'id' ],
  where: { id: '497026' },
  limit: 500
}
[2019-07-18 14:03:58.914] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 14:03:58.932] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id` FROM `orders` AS `ticket` WHERE `ticket`.`id` = '497026' LIMIT 500; 6ms
[2019-07-18 14:03:58.933] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - _tickets: [ { id: 497026 } ]
[2019-07-18 14:03:58.934] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 14:03:58.934] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  fields: {
    ticket: [
           'archivedFlag',           'billDate',
             'billNumber',        'blockNumber',
        'cbsWarrantyFlag',        'checkedFlag',
      'commonFieldString',               'date',
            'description',        'detailsHash',
              'diagPrice',    'failDescription',
             'frozenFlag',               'hash',
                     'id',        'invoiceDate',
                 'number', 'numberFromCustomer',
               'onceFlag',           'paidFlag',
               'parentId',           'partName',
             'partNumber',  'reasonDescription',
            'repairPrice',          'retryFlag',
           'serialNumber',  'subcontractorFlag',
           'warrantyFlag',            'ownerId'
    ],
    city: [],
    contract: [],
    customer: [],
    customerContact: [],
    customerPerson: [],
    equipSupplier: [],
    reason: [],
    seller: [],
    sellerPerson: [],
    serviceType: [],
    vendor: [],
    next: [],
    status: [ 'id', 'name' ],
    equipment: [],
    equipmentType: [],
    timeout: [ 'timeout', 'reasonId' ],
    timeoutReason: [],
    models: [
               'ticket',            'city',
             'contract',        'customer',
      'customerContact',  'customerPerson',
        'equipSupplier',          'reason',
               'seller',    'sellerPerson',
          'serviceType',          'vendor',
                 'next',          'status',
            'equipment',   'equipmentType',
              'timeout',   'timeoutReason'
    ]
  },
  filters: { models: [ 'ticket' ], ticket: { id: [Object] } },
  checkedModels: [],
  order: []
}
[2019-07-18 14:03:58.938] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters { models: [ 'ticket' ], ticket: { id: { '$in': [Array] } } }
[2019-07-18 14:03:58.938] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  id ticket
[2019-07-18 14:03:58.940] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  []
[2019-07-18 14:03:58.940] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket' ]
[2019-07-18 14:03:58.940] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 14:03:58.941] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"fields":{"ticket":["archivedFlag","billDate","billNumber","blockNumber","cbsWarrantyFlag","checkedFlag","commonFieldString","date","description","detailsHash","diagPrice","failDescription","frozenFlag","hash","id","invoiceDate","number","numberFromCustomer","onceFlag","paidFlag","parentId","partName","partNumber","reasonDescription","repairPrice","retryFlag","serialNumber","subcontractorFlag","warrantyFlag","ownerId"],"city":[],"contract":[],"customer":[],"customerContact":[],"customerPerson":[],"equipSupplier":[],"reason":[],"seller":[],"sellerPerson":[],"serviceType":[],"vendor":[],"next":[],"status":["id","name"],"equipment":[],"equipmentType":[],"timeout":["timeout","reasonId"],"timeoutReason":[],"models":["ticket","city","contract","customer","customerContact","customerPerson","equipSupplier","reason","seller","sellerPerson","serviceType","vendor","next","status","equipment","equipmentType","timeout","timeoutReason"]},"filters":{"models":["ticket"],"ticket":{"id":{"$in":[497026]}}},"checkedModels":["ticket"],"order":[]}
[2019-07-18 14:03:58.942] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 14:03:58.942] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  [
  {
    model: [Function: status] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'status',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getNextStatus: [Function]
    },
    required: true,
    attributes: [ 'id', 'name' ]
  },
  {
    model: [Function: city] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'city',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: {},
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: false,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array]
    }
  },
  {
    include: { model: [Function] },
    model: [Function: equipment] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'equipment',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      myAssociations: [Array]
    }
  },
  {
    model: [Function: customer] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'customers',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getByName: [Function]
    }
  },
  {
    as: 'customerPerson',
    model: [Function: contacts] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'contacts',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getFirstCustomerContact: [AsyncFunction]
    }
  },
  {
    model: [Function: serviceType] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'servicetype',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: {},
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: false,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getAvailable: [Function]
    }
  },
  {
    model: [Function: vendor] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'vendors',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      values: [Object]
    }
  },
  {
    as: 'seller',
    model: [Function: customer] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'customers',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getByName: [Function]
    }
  },
  {
    as: 'sellerPerson',
    model: [Function: contacts] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'contacts',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getFirstCustomerContact: [AsyncFunction]
    }
  },
  {
    model: [Function: contract] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'contract',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object]
    }
  },
  {
    model: [Function: reason] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'reasons',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      getParent: [Function],
      getChildren: [Function],
      getCount: [Function]
    }
  },
  {
    include: { model: [Function] },
    where: { activeFlag: 1 },
    required: false,
    model: [Function: timeout] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'order_timeout',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'ticketId',
      primaryKeyField: 'order_id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: null,
      _scope: {},
      _scopeNames: [Array],
      transactionCreateTimeout: [AsyncFunction],
      create: [Function],
      getAll: [AsyncFunction],
      deactivate: [Function],
      myAssociations: [Array]
    },
    attributes: [ 'timeout', 'reasonId' ]
  }
]
