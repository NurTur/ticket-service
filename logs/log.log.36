[2019-07-18 10:11:37.572] [Level { level: 20000, levelStr: 'INFO' }] [default] - getSearch...
[2019-07-18 10:11:37.573] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [Object: null prototype] {
  fields: '{"customer":["id","name"],"equipment":["id","endWarrantyDate","id","endCBSWarrantyDate","id","serialNumber","id","regNumber","id","bnaFlag"],"equipmentType":["id","name","model"],"performer":["id","name"],"ticket":["id","vendorId","typeId","number","serviceTypeId","date","warrantyFlag","cbsWarrantyFlag","commonFieldString","statusId","cityId","subcontractorFlag","reasonDescription"],"timeout":["timeout"]}',
  filters: '{"ticket":{"statusId":{"$in":[1,3,4,5,6,15,18,20,21,22,24,25,26,27,29,30,31]},"date":{"$between":["2000-01-01","2019-07-18"]}},"equipment":{},"timeout":{}}',
  sort: '{"ticket":{"date":"desc"}}',
  limit: '[100,0]',
  count: 'true',
  userId: '1'
}
[2019-07-18 10:11:37.574] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - fastSearch:  {
  limit: [ 100, 0 ],
  sort: { models: [ 'ticket' ], ticket: { date: 'desc' } },
  filters: {
    models: [ 'ticket', 'equipment', 'timeout' ],
    timeout: {},
    equipment: {},
    ticket: { date: [Object], statusId: [Object] }
  },
  fields: {
    models: [
      'customer',
      'equipment',
      'equipmentType',
      'performer',
      'ticket',
      'timeout'
    ],
    timeout: [ 'timeout' ],
    ticket: [
      'id',
      'vendorId',
      'typeId',
      'number',
      'serviceTypeId',
      'date',
      'warrantyFlag',
      'cbsWarrantyFlag',
      'commonFieldString',
      'statusId',
      'cityId',
      'subcontractorFlag',
      'reasonDescription'
    ],
    performer: [ 'id', 'name' ],
    equipmentType: [ 'id', 'name', 'model' ],
    equipment: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ],
    customer: [ 'id', 'name' ]
  }
}
[2019-07-18 10:11:37.577] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 10:11:37.578] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  limit: [ 100, 0 ],
  sort: { models: [ 'ticket' ], ticket: { date: 'desc' } },
  filters: {
    models: [ 'ticket', 'equipment', 'timeout' ],
    timeout: {},
    equipment: {},
    ticket: { date: [Object], statusId: [Object] }
  },
  fields: { models: [ 'ticket' ], ticket: [ 'id' ] },
  checkedModels: [],
  order: []
}
[2019-07-18 10:11:37.579] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters {
  models: [ 'ticket', 'equipment', 'timeout' ],
  timeout: {},
  equipment: {},
  ticket: { date: { '$between': [Array] }, statusId: { '$in': [Array] } }
}
[2019-07-18 10:11:37.581] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  date ticket
[2019-07-18 10:11:37.582] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters {
  models: [ 'ticket', 'equipment', 'timeout' ],
  timeout: {},
  equipment: {},
  ticket: { date: { '$between': [Array] }, statusId: { '$in': [Array] } }
}
[2019-07-18 10:11:37.583] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  statusId ticket
[2019-07-18 10:11:37.584] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  [ [ [ 'date', 'desc' ] ] ]
[2019-07-18 10:11:37.584] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket', 'ticket', 'ticket' ]
[2019-07-18 10:11:37.585] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 10:11:37.585] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"limit":[100,0],"sort":{"models":["ticket"],"ticket":{"date":"desc"}},"filters":{"models":["ticket","equipment","timeout"],"timeout":{},"equipment":{},"ticket":{"date":{"$between":["2000-01-01","2019-07-18"]},"statusId":{"$in":[1,3,4,5,6,15,18,20,21,22,24,25,26,27,29,30,31]}}},"fields":{"models":["ticket"],"ticket":["id"]},"checkedModels":["ticket","ticket","ticket"],"order":[[["date","desc"]]]}
[2019-07-18 10:11:37.586] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 10:11:37.586] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  []
[2019-07-18 10:11:37.586] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [],
  attributes: [ 'id' ],
  where: { date: { '$between': [Array] }, statusId: { '$in': [Array] } },
  order: [ [ 'date', 'desc' ] ],
  limit: 100,
  offset: 0
}
[2019-07-18 10:11:37.638] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:37.638] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id` FROM `orders` AS `ticket` WHERE `ticket`.`orderdate` BETWEEN '2000-01-01' AND '2019-07-18' AND `ticket`.`statusid` IN (1, 3, 4, 5, 6, 15, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31) ORDER BY `ticket`.`orderdate` DESC LIMIT 0, 100; 31ms
[2019-07-18 10:11:37.670] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:37.670] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT count(`ticket`.`id`) AS `count` FROM `orders` AS `ticket` WHERE `ticket`.`orderdate` BETWEEN '2000-01-01' AND '2019-07-18' AND `ticket`.`statusid` IN (1, 3, 4, 5, 6, 15, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31); 64ms
[2019-07-18 10:11:37.672] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - _tickets: [
  { id: 497078 }, { id: 497077 }, { id: 497076 }, { id: 497075 },
  { id: 497074 }, { id: 497073 }, { id: 497072 }, { id: 497071 },
  { id: 497070 }, { id: 497069 }, { id: 497068 }, { id: 497067 },
  { id: 497066 }, { id: 497065 }, { id: 497064 }, { id: 497063 },
  { id: 497062 }, { id: 497061 }, { id: 497060 }, { id: 497059 },
  { id: 497058 }, { id: 497057 }, { id: 497056 }, { id: 497055 },
  { id: 497054 }, { id: 497053 }, { id: 497052 }, { id: 497051 },
  { id: 497050 }, { id: 497049 }, { id: 497048 }, { id: 497047 },
  { id: 497046 }, { id: 497045 }, { id: 497044 }, { id: 497043 },
  { id: 497042 }, { id: 497041 }, { id: 497040 }, { id: 497039 },
  { id: 497038 }, { id: 497037 }, { id: 497036 }, { id: 497035 },
  { id: 497034 }, { id: 497033 }, { id: 497032 }, { id: 497031 },
  { id: 497030 }, { id: 497029 }, { id: 497028 }, { id: 497027 },
  { id: 497026 }, { id: 497025 }, { id: 497023 }, { id: 497022 },
  { id: 497021 }, { id: 497020 }, { id: 497019 }, { id: 497018 },
  { id: 497017 }, { id: 497015 }, { id: 497014 }, { id: 497013 },
  { id: 497012 }, { id: 497011 }, { id: 497010 }, { id: 497009 },
  { id: 497008 }, { id: 497007 }, { id: 497006 }, { id: 497004 },
  { id: 497003 }, { id: 497002 }, { id: 497001 }, { id: 497000 },
  { id: 496999 }, { id: 496998 }, { id: 496997 }, { id: 496996 },
  { id: 496995 }, { id: 496994 }, { id: 496993 }, { id: 496992 },
  { id: 496991 }, { id: 496990 }, { id: 496989 }, { id: 496988 },
  { id: 496987 }, { id: 496986 }, { id: 496984 }, { id: 496983 },
  { id: 496982 }, { id: 496981 }, { id: 496979 }, { id: 496977 },
  { id: 496976 }, { id: 496975 }, { id: 496974 }, { id: 496972 }
]
[2019-07-18 10:11:37.673] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 10:11:37.674] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  fields: {
    customer: [ 'id', 'name' ],
    equipment: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ],
    equipmentType: [ 'id', 'name', 'model' ],
    performer: [ 'id', 'name' ],
    ticket: [
      'id',
      'vendorId',
      'typeId',
      'number',
      'serviceTypeId',
      'date',
      'warrantyFlag',
      'cbsWarrantyFlag',
      'commonFieldString',
      'statusId',
      'cityId',
      'subcontractorFlag',
      'reasonDescription'
    ],
    timeout: [ 'timeout' ],
    models: [
      'customer',
      'equipment',
      'equipmentType',
      'performer',
      'ticket',
      'timeout'
    ]
  },
  filters: { models: [ 'ticket' ], ticket: { id: [Object] } },
  sort: { ticket: { date: 'desc' }, models: [ 'ticket' ] },
  checkedModels: [],
  order: []
}
[2019-07-18 10:11:37.675] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters { models: [ 'ticket' ], ticket: { id: { '$in': [Array] } } }
[2019-07-18 10:11:37.675] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  id ticket
[2019-07-18 10:11:37.676] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  [ [ [ 'date', 'desc' ] ] ]
[2019-07-18 10:11:37.676] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket', 'ticket' ]
[2019-07-18 10:11:37.676] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 10:11:37.676] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"fields":{"customer":["id","name"],"equipment":["id","endWarrantyDate","id","endCBSWarrantyDate","id","serialNumber","id","regNumber","id","bnaFlag"],"equipmentType":["id","name","model"],"performer":["id","name"],"ticket":["id","vendorId","typeId","number","serviceTypeId","date","warrantyFlag","cbsWarrantyFlag","commonFieldString","statusId","cityId","subcontractorFlag","reasonDescription"],"timeout":["timeout"],"models":["customer","equipment","equipmentType","performer","ticket","timeout"]},"filters":{"models":["ticket"],"ticket":{"id":{"$in":[497078,497077,497076,497075,497074,497073,497072,497071,497070,497069,497068,497067,497066,497065,497064,497063,497062,497061,497060,497059,497058,497057,497056,497055,497054,497053,497052,497051,497050,497049,497048,497047,497046,497045,497044,497043,497042,497041,497040,497039,497038,497037,497036,497035,497034,497033,497032,497031,497030,497029,497028,497027,497026,497025,497023,497022,497021,497020,497019,497018,497017,497015,497014,497013,497012,497011,497010,497009,497008,497007,497006,497004,497003,497002,497001,497000,496999,496998,496997,496996,496995,496994,496993,496992,496991,496990,496989,496988,496987,496986,496984,496983,496982,496981,496979,496977,496976,496975,496974,496972]}}},"sort":{"ticket":{"date":"desc"},"models":["ticket"]},"checkedModels":["ticket","ticket"],"order":[[["date","desc"]]]}
[2019-07-18 10:11:37.677] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 10:11:37.677] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  [
  {
    model: [Function: status] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'status',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getNextStatus: [Function]
    },
    required: true,
    attributes: []
  },
  {
    as: 'performer',
    model: [Function: user] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'users',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [Array],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: true,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      RoleValues: [Object],
      getUserRole: [AsyncFunction],
      getUserRoleId: [AsyncFunction],
      autorize: [AsyncFunction],
      getByParams: [AsyncFunction]
    },
    attributes: [ 'id', 'name' ]
  },
  {
    include: { attributes: [Array], model: [Function] },
    model: [Function: equipment] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'equipment',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      myAssociations: [Array]
    },
    attributes: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ]
  },
  {
    model: [Function: customer] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'customers',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getByName: [Function]
    },
    attributes: [ 'id', 'name' ]
  },
  {
    include: { model: [Function], attributes: [] },
    where: { activeFlag: 1 },
    required: false,
    model: [Function: timeout] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'order_timeout',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'ticketId',
      primaryKeyField: 'order_id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: null,
      _scope: {},
      _scopeNames: [Array],
      transactionCreateTimeout: [AsyncFunction],
      create: [Function],
      getAll: [AsyncFunction],
      deactivate: [Function],
      myAssociations: [Array]
    },
    attributes: [ 'timeout' ]
  }
]
[2019-07-18 10:11:37.685] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true, attributes: [] },
    { as: 'performer', model: [Function], attributes: [Array] },
    { include: [Object], model: [Function], attributes: [Array] },
    { model: [Function], attributes: [Array] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function],
      attributes: [Array]
    }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ],
    'id',
    'vendorId',
    'typeId',
    'number',
    'serviceTypeId',
    'date',
    'warrantyFlag',
    'cbsWarrantyFlag',
    'commonFieldString',
    'statusId',
    'cityId',
    'subcontractorFlag',
    'reasonDescription'
  ],
  where: { id: { '$in': [Array] } },
  order: [ [ 'date', 'desc' ] ]
}
[2019-07-18 10:11:37.733] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:37.745] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`ordernumber` AS `number`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`orderdate` AS `date`, `ticket`.`warranty` AS `warrantyFlag`, `ticket`.`cbswarranty` AS `cbsWarrantyFlag`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`statusid` AS `statusId`, `ticket`.`cityid` AS `cityId`, `ticket`.`subcontractor` AS `subcontractorFlag`, `ticket`.`reason_description` AS `reasonDescription`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `equipment`.`id` AS `equipment.id`, `equipment`.`endwarrantydate` AS `equipment.endWarrantyDate`, `equipment`.`id` AS `equipment.id`, `equipment`.`endcbswarrantydate` AS `equipment.endCBSWarrantyDate`, `equipment`.`id` AS `equipment.id`, `equipment`.`serialnumber` AS `equipment.serialNumber`, `equipment`.`id` AS `equipment.id`, `equipment`.`regnumber` AS `equipment.regNumber`, `equipment`.`id` AS `equipment.id`, `equipment`.`bna` AS `equipment.bnaFlag`, `equipment->equipmentType`.`id` AS `equipment.equipmentType.id`, `equipment->equipmentType`.`name` AS `equipment.equipmentType.name`, `equipment->equipmentType`.`typemodel` AS `equipment.equipmentType.model`, `customer`.`id` AS `customer.id`, `customer`.`name` AS `customer.name`, `timeout`.`reason_id` AS `timeout.reasonId`, `timeout`.`order_id` AS `timeout.ticketId`, `timeout`.`timeout` AS `timeout.timeout` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticket`.`performerid` = `performer`.`id` LEFT OUTER JOIN `equipment` AS `equipment` ON `ticket`.`equipmentid` = `equipment`.`id` LEFT OUTER JOIN `equipmenttypes` AS `equipment->equipmentType` ON `equipment`.`typemodelid` = `equipment->equipmentType`.`id` LEFT OUTER JOIN `customers` AS `customer` ON `ticket`.`customerid` = `customer`.`id` LEFT OUTER JOIN `order_timeout` AS `timeout` ON `ticket`.`id` = `timeout`.`order_id` AND `timeout`.`active` = 1 LEFT OUTER JOIN `order_timeout_reason` AS `timeout->timeoutReason` ON `timeout`.`reason_id` = `timeout->timeoutReason`.`id` WHERE `ticket`.`id` IN (497078, 497077, 497076, 497075, 497074, 497073, 497072, 497071, 497070, 497069, 497068, 497067, 497066, 497065, 497064, 497063, 497062, 497061, 497060, 497059, 497058, 497057, 497056, 497055, 497054, 497053, 497052, 497051, 497050, 497049, 497048, 497047, 497046, 497045, 497044, 497043, 497042, 497041, 497040, 497039, 497038, 497037, 497036, 497035, 497034, 497033, 497032, 497031, 497030, 497029, 497028, 497027, 497026, 497025, 497023, 497022, 497021, 497020, 497019, 497018, 497017, 497015, 497014, 497013, 497012, 497011, 497010, 497009, 497008, 497007, 497006, 497004, 497003, 497002, 497001, 497000, 496999, 496998, 496997, 496996, 496995, 496994, 496993, 496992, 496991, 496990, 496989, 496988, 496987, 496986, 496984, 496983, 496982, 496981, 496979, 496977, 496976, 496975, 496974, 496972) ORDER BY `ticket`.`orderdate` DESC; 22ms
[2019-07-18 10:11:37.770] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1 200 251ms 121.28kb
[2019-07-18 10:11:39.208] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/cities?checksum=0
[2019-07-18 10:11:39.212] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/service-types?checksum=0
[2019-07-18 10:11:39.220] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/statuses?checksum=0
[2019-07-18 10:11:39.223] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/types?checksum=0
[2019-07-18 10:11:39.244] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/vendors?checksum=0
[2019-07-18 10:11:39.245] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/devices?checksum=0
[2019-07-18 10:11:39.246] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.247] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `city`; 35ms
[2019-07-18 10:11:39.250] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/users
[2019-07-18 10:11:39.251] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getByParams
[2019-07-18 10:11:39.252] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.252] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `servicetype`; 30ms
[2019-07-18 10:11:39.253] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.254] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `status`; 31ms
[2019-07-18 10:11:39.256] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 469028310
[2019-07-18 10:11:39.257] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 2129809734
[2019-07-18 10:11:39.258] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 832200969
[2019-07-18 10:11:39.267] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.268] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `ordertype`; 18ms
[2019-07-18 10:11:39.269] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 797875960
[2019-07-18 10:11:39.270] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.271] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `vendors`; 21ms
[2019-07-18 10:11:39.272] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.273] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `devices`; 17ms
[2019-07-18 10:11:39.274] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 1168970086
[2019-07-18 10:11:39.275] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 3672458130
[2019-07-18 10:11:39.281] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.282] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `users` AS `user` WHERE `user`.`blocked` = 0 AND `user`.`name` != 'Administrator' ORDER BY `user`.`name`; 24ms
[2019-07-18 10:11:39.287] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.323] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `ordertype` AS `type` WHERE 1=1 ORDER BY `type`.`name`; 14ms
[2019-07-18 10:11:39.339] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.353] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `city` AS `city` WHERE 1=1 ORDER BY `city`.`name`; 71ms
[2019-07-18 10:11:39.382] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.384] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `servicetype` AS `serviceType` WHERE 1=1 ORDER BY `serviceType`.`name`; 113ms
[2019-07-18 10:11:39.389] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/users 200 139ms 11.29kb
[2019-07-18 10:11:39.400] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.409] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `status` AS `status` WHERE 1=1 ORDER BY `status`.`name`; 129ms
[2019-07-18 10:11:39.418] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.423] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `vendors` AS `vendor` WHERE 1=1 ORDER BY `vendor`.`name`; 132ms
[2019-07-18 10:11:39.427] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/types?checksum=0 200 204ms 674b
[2019-07-18 10:11:39.455] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/cities?checksum=0 200 247ms 1.13kb
[2019-07-18 10:11:39.459] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/service-types?checksum=0 200 247ms 692b
[2019-07-18 10:11:39.488] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.491] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name`, `parent_id` AS `parentId`, `vendor_id` AS `vendorId` FROM `devices` AS `device` WHERE 1=1 ORDER BY `device`.`name`; 102ms
[2019-07-18 10:11:39.525] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/statuses?checksum=0 200 304ms 1.28kb
[2019-07-18 10:11:39.525] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/vendors?checksum=0 200 281ms 1.66kb
[2019-07-18 10:11:39.538] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/devices?checksum=0 200 293ms 34.54kb
[2019-07-18 10:11:39.638] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1
[2019-07-18 10:11:39.640] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 10:11:39.640] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 10:11:39.672] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.673] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 1ms
[2019-07-18 10:11:39.674] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 10:11:39.675] [Level { level: 20000, levelStr: 'INFO' }] [default] - getAll_DualSearch
[2019-07-18 10:11:39.676] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true },
    { as: 'performer', model: [Function] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { attributes: [], model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] },
    { include: [Array], separate: true, model: [Function] },
    {
      include: [Array],
      as: 'history',
      separate: true,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ]
  ]
}
[2019-07-18 10:11:39.692] [Level { level: 20000, levelStr: 'INFO' }] [default] - getSearch...
[2019-07-18 10:11:39.693] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [Object: null prototype] {
  fields: '{"customer":["id","name"],"equipment":["id","endWarrantyDate","id","endCBSWarrantyDate","id","serialNumber","id","regNumber","id","bnaFlag"],"equipmentType":["id","name","model"],"performer":["id","name"],"ticket":["id","vendorId","typeId","number","serviceTypeId","date","warrantyFlag","cbsWarrantyFlag","commonFieldString","statusId","cityId","subcontractorFlag","reasonDescription"],"timeout":["timeout"]}',
  filters: '{"ticket":{"statusId":{"$in":[1,3,4,5,6,15,18,20,21,22,24,25,26,27,29,30,31]},"date":{"$between":["2000-01-01","2019-07-18"]}},"equipment":{},"timeout":{}}',
  sort: '{"ticket":{"date":"desc"}}',
  limit: '[100,0]',
  count: 'true',
  userId: '1'
}
[2019-07-18 10:11:39.694] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - fastSearch:  {
  limit: [ 100, 0 ],
  sort: { models: [ 'ticket' ], ticket: { date: 'desc' } },
  filters: {
    models: [ 'ticket', 'equipment', 'timeout' ],
    timeout: {},
    equipment: {},
    ticket: { date: [Object], statusId: [Object] }
  },
  fields: {
    models: [
      'customer',
      'equipment',
      'equipmentType',
      'performer',
      'ticket',
      'timeout'
    ],
    timeout: [ 'timeout' ],
    ticket: [
      'id',
      'vendorId',
      'typeId',
      'number',
      'serviceTypeId',
      'date',
      'warrantyFlag',
      'cbsWarrantyFlag',
      'commonFieldString',
      'statusId',
      'cityId',
      'subcontractorFlag',
      'reasonDescription'
    ],
    performer: [ 'id', 'name' ],
    equipmentType: [ 'id', 'name', 'model' ],
    equipment: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ],
    customer: [ 'id', 'name' ]
  }
}
[2019-07-18 10:11:39.697] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 10:11:39.698] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  limit: [ 100, 0 ],
  sort: { models: [ 'ticket' ], ticket: { date: 'desc' } },
  filters: {
    models: [ 'ticket', 'equipment', 'timeout' ],
    timeout: {},
    equipment: {},
    ticket: { date: [Object], statusId: [Object] }
  },
  fields: { models: [ 'ticket' ], ticket: [ 'id' ] },
  checkedModels: [],
  order: []
}
[2019-07-18 10:11:39.702] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters {
  models: [ 'ticket', 'equipment', 'timeout' ],
  timeout: {},
  equipment: {},
  ticket: { date: { '$between': [Array] }, statusId: { '$in': [Array] } }
}
[2019-07-18 10:11:39.722] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  date ticket
[2019-07-18 10:11:39.723] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters {
  models: [ 'ticket', 'equipment', 'timeout' ],
  timeout: {},
  equipment: {},
  ticket: { date: { '$between': [Array] }, statusId: { '$in': [Array] } }
}
[2019-07-18 10:11:39.723] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  statusId ticket
[2019-07-18 10:11:39.724] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  [ [ [ 'date', 'desc' ] ] ]
[2019-07-18 10:11:39.725] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket', 'ticket', 'ticket' ]
[2019-07-18 10:11:39.726] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 10:11:39.726] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"limit":[100,0],"sort":{"models":["ticket"],"ticket":{"date":"desc"}},"filters":{"models":["ticket","equipment","timeout"],"timeout":{},"equipment":{},"ticket":{"date":{"$between":["2000-01-01","2019-07-18"]},"statusId":{"$in":[1,3,4,5,6,15,18,20,21,22,24,25,26,27,29,30,31]}}},"fields":{"models":["ticket"],"ticket":["id"]},"checkedModels":["ticket","ticket","ticket"],"order":[[["date","desc"]]]}
[2019-07-18 10:11:39.726] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 10:11:39.727] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  []
[2019-07-18 10:11:39.727] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [],
  attributes: [ 'id' ],
  where: { date: { '$between': [Array] }, statusId: { '$in': [Array] } },
  order: [ [ 'date', 'desc' ] ],
  limit: 100,
  offset: 0
}
[2019-07-18 10:11:39.744] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.744] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id` FROM `orders` AS `ticket` WHERE `ticket`.`orderdate` BETWEEN '2000-01-01' AND '2019-07-18' AND `ticket`.`statusid` IN (1, 3, 4, 5, 6, 15, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31) ORDER BY `ticket`.`orderdate` DESC LIMIT 0, 100; 2ms
[2019-07-18 10:11:39.771] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.772] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT count(`ticket`.`id`) AS `count` FROM `orders` AS `ticket` WHERE `ticket`.`orderdate` BETWEEN '2000-01-01' AND '2019-07-18' AND `ticket`.`statusid` IN (1, 3, 4, 5, 6, 15, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31); 30ms
[2019-07-18 10:11:39.772] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - _tickets: [
  { id: 497078 }, { id: 497077 }, { id: 497076 }, { id: 497075 },
  { id: 497074 }, { id: 497073 }, { id: 497072 }, { id: 497071 },
  { id: 497070 }, { id: 497069 }, { id: 497068 }, { id: 497067 },
  { id: 497066 }, { id: 497065 }, { id: 497064 }, { id: 497063 },
  { id: 497062 }, { id: 497061 }, { id: 497060 }, { id: 497059 },
  { id: 497058 }, { id: 497057 }, { id: 497056 }, { id: 497055 },
  { id: 497054 }, { id: 497053 }, { id: 497052 }, { id: 497051 },
  { id: 497050 }, { id: 497049 }, { id: 497048 }, { id: 497047 },
  { id: 497046 }, { id: 497045 }, { id: 497044 }, { id: 497043 },
  { id: 497042 }, { id: 497041 }, { id: 497040 }, { id: 497039 },
  { id: 497038 }, { id: 497037 }, { id: 497036 }, { id: 497035 },
  { id: 497034 }, { id: 497033 }, { id: 497032 }, { id: 497031 },
  { id: 497030 }, { id: 497029 }, { id: 497028 }, { id: 497027 },
  { id: 497026 }, { id: 497025 }, { id: 497023 }, { id: 497022 },
  { id: 497021 }, { id: 497020 }, { id: 497019 }, { id: 497018 },
  { id: 497017 }, { id: 497015 }, { id: 497014 }, { id: 497013 },
  { id: 497012 }, { id: 497011 }, { id: 497010 }, { id: 497009 },
  { id: 497008 }, { id: 497007 }, { id: 497006 }, { id: 497004 },
  { id: 497003 }, { id: 497002 }, { id: 497001 }, { id: 497000 },
  { id: 496999 }, { id: 496998 }, { id: 496997 }, { id: 496996 },
  { id: 496995 }, { id: 496994 }, { id: 496993 }, { id: 496992 },
  { id: 496991 }, { id: 496990 }, { id: 496989 }, { id: 496988 },
  { id: 496987 }, { id: 496986 }, { id: 496984 }, { id: 496983 },
  { id: 496982 }, { id: 496981 }, { id: 496979 }, { id: 496977 },
  { id: 496976 }, { id: 496975 }, { id: 496974 }, { id: 496972 }
]
[2019-07-18 10:11:39.773] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 10:11:39.773] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  fields: {
    customer: [ 'id', 'name' ],
    equipment: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ],
    equipmentType: [ 'id', 'name', 'model' ],
    performer: [ 'id', 'name' ],
    ticket: [
      'id',
      'vendorId',
      'typeId',
      'number',
      'serviceTypeId',
      'date',
      'warrantyFlag',
      'cbsWarrantyFlag',
      'commonFieldString',
      'statusId',
      'cityId',
      'subcontractorFlag',
      'reasonDescription'
    ],
    timeout: [ 'timeout' ],
    models: [
      'customer',
      'equipment',
      'equipmentType',
      'performer',
      'ticket',
      'timeout'
    ]
  },
  filters: { models: [ 'ticket' ], ticket: { id: [Object] } },
  sort: { ticket: { date: 'desc' }, models: [ 'ticket' ] },
  checkedModels: [],
  order: []
}
[2019-07-18 10:11:39.775] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters { models: [ 'ticket' ], ticket: { id: { '$in': [Array] } } }
[2019-07-18 10:11:39.775] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  id ticket
[2019-07-18 10:11:39.776] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  [ [ [ 'date', 'desc' ] ] ]
[2019-07-18 10:11:39.776] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket', 'ticket' ]
[2019-07-18 10:11:39.776] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 10:11:39.777] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"fields":{"customer":["id","name"],"equipment":["id","endWarrantyDate","id","endCBSWarrantyDate","id","serialNumber","id","regNumber","id","bnaFlag"],"equipmentType":["id","name","model"],"performer":["id","name"],"ticket":["id","vendorId","typeId","number","serviceTypeId","date","warrantyFlag","cbsWarrantyFlag","commonFieldString","statusId","cityId","subcontractorFlag","reasonDescription"],"timeout":["timeout"],"models":["customer","equipment","equipmentType","performer","ticket","timeout"]},"filters":{"models":["ticket"],"ticket":{"id":{"$in":[497078,497077,497076,497075,497074,497073,497072,497071,497070,497069,497068,497067,497066,497065,497064,497063,497062,497061,497060,497059,497058,497057,497056,497055,497054,497053,497052,497051,497050,497049,497048,497047,497046,497045,497044,497043,497042,497041,497040,497039,497038,497037,497036,497035,497034,497033,497032,497031,497030,497029,497028,497027,497026,497025,497023,497022,497021,497020,497019,497018,497017,497015,497014,497013,497012,497011,497010,497009,497008,497007,497006,497004,497003,497002,497001,497000,496999,496998,496997,496996,496995,496994,496993,496992,496991,496990,496989,496988,496987,496986,496984,496983,496982,496981,496979,496977,496976,496975,496974,496972]}}},"sort":{"ticket":{"date":"desc"},"models":["ticket"]},"checkedModels":["ticket","ticket"],"order":[[["date","desc"]]]}
[2019-07-18 10:11:39.777] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 10:11:39.777] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  [
  {
    model: [Function: status] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'status',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getNextStatus: [Function]
    },
    required: true,
    attributes: []
  },
  {
    as: 'performer',
    model: [Function: user] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'users',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [Array],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: true,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      RoleValues: [Object],
      getUserRole: [AsyncFunction],
      getUserRoleId: [AsyncFunction],
      autorize: [AsyncFunction],
      getByParams: [AsyncFunction]
    },
    attributes: [ 'id', 'name' ]
  },
  {
    include: { attributes: [Array], model: [Function] },
    model: [Function: equipment] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'equipment',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      myAssociations: [Array]
    },
    attributes: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ]
  },
  {
    model: [Function: customer] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'customers',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getByName: [Function]
    },
    attributes: [ 'id', 'name' ]
  },
  {
    include: { model: [Function], attributes: [] },
    where: { activeFlag: 1 },
    required: false,
    model: [Function: timeout] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'order_timeout',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'ticketId',
      primaryKeyField: 'order_id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: null,
      _scope: {},
      _scopeNames: [Array],
      transactionCreateTimeout: [AsyncFunction],
      create: [Function],
      getAll: [AsyncFunction],
      deactivate: [Function],
      myAssociations: [Array]
    },
    attributes: [ 'timeout' ]
  }
]
[2019-07-18 10:11:39.788] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true, attributes: [] },
    { as: 'performer', model: [Function], attributes: [Array] },
    { include: [Object], model: [Function], attributes: [Array] },
    { model: [Function], attributes: [Array] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function],
      attributes: [Array]
    }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ],
    'id',
    'vendorId',
    'typeId',
    'number',
    'serviceTypeId',
    'date',
    'warrantyFlag',
    'cbsWarrantyFlag',
    'commonFieldString',
    'statusId',
    'cityId',
    'subcontractorFlag',
    'reasonDescription'
  ],
  where: { id: { '$in': [Array] } },
  order: [ [ 'date', 'desc' ] ]
}
[2019-07-18 10:11:39.823] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:39.823] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`ordernumber` AS `number`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`orderdate` AS `date`, `ticket`.`warranty` AS `warrantyFlag`, `ticket`.`cbswarranty` AS `cbsWarrantyFlag`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`statusid` AS `statusId`, `ticket`.`cityid` AS `cityId`, `ticket`.`subcontractor` AS `subcontractorFlag`, `ticket`.`reason_description` AS `reasonDescription`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `equipment`.`id` AS `equipment.id`, `equipment`.`endwarrantydate` AS `equipment.endWarrantyDate`, `equipment`.`id` AS `equipment.id`, `equipment`.`endcbswarrantydate` AS `equipment.endCBSWarrantyDate`, `equipment`.`id` AS `equipment.id`, `equipment`.`serialnumber` AS `equipment.serialNumber`, `equipment`.`id` AS `equipment.id`, `equipment`.`regnumber` AS `equipment.regNumber`, `equipment`.`id` AS `equipment.id`, `equipment`.`bna` AS `equipment.bnaFlag`, `equipment->equipmentType`.`id` AS `equipment.equipmentType.id`, `equipment->equipmentType`.`name` AS `equipment.equipmentType.name`, `equipment->equipmentType`.`typemodel` AS `equipment.equipmentType.model`, `customer`.`id` AS `customer.id`, `customer`.`name` AS `customer.name`, `timeout`.`reason_id` AS `timeout.reasonId`, `timeout`.`order_id` AS `timeout.ticketId`, `timeout`.`timeout` AS `timeout.timeout` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticket`.`performerid` = `performer`.`id` LEFT OUTER JOIN `equipment` AS `equipment` ON `ticket`.`equipmentid` = `equipment`.`id` LEFT OUTER JOIN `equipmenttypes` AS `equipment->equipmentType` ON `equipment`.`typemodelid` = `equipment->equipmentType`.`id` LEFT OUTER JOIN `customers` AS `customer` ON `ticket`.`customerid` = `customer`.`id` LEFT OUTER JOIN `order_timeout` AS `timeout` ON `ticket`.`id` = `timeout`.`order_id` AND `timeout`.`active` = 1 LEFT OUTER JOIN `order_timeout_reason` AS `timeout->timeoutReason` ON `timeout`.`reason_id` = `timeout->timeoutReason`.`id` WHERE `ticket`.`id` IN (497078, 497077, 497076, 497075, 497074, 497073, 497072, 497071, 497070, 497069, 497068, 497067, 497066, 497065, 497064, 497063, 497062, 497061, 497060, 497059, 497058, 497057, 497056, 497055, 497054, 497053, 497052, 497051, 497050, 497049, 497048, 497047, 497046, 497045, 497044, 497043, 497042, 497041, 497040, 497039, 497038, 497037, 497036, 497035, 497034, 497033, 497032, 497031, 497030, 497029, 497028, 497027, 497026, 497025, 497023, 497022, 497021, 497020, 497019, 497018, 497017, 497015, 497014, 497013, 497012, 497011, 497010, 497009, 497008, 497007, 497006, 497004, 497003, 497002, 497001, 497000, 496999, 496998, 496997, 496996, 496995, 496994, 496993, 496992, 496991, 496990, 496989, 496988, 496987, 496986, 496984, 496983, 496982, 496981, 496979, 496977, 496976, 496975, 496974, 496972) ORDER BY `ticket`.`orderdate` DESC; 19ms
[2019-07-18 10:11:39.846] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1 200 208ms 121.28kb
[2019-07-18 10:11:40.849] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/cities?checksum=0
[2019-07-18 10:11:40.851] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/service-types?checksum=0
[2019-07-18 10:11:40.853] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/statuses?checksum=0
[2019-07-18 10:11:40.869] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/types?checksum=0
[2019-07-18 10:11:40.870] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/devices?checksum=0
[2019-07-18 10:11:40.871] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/vendors?checksum=0
[2019-07-18 10:11:40.871] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.872] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `city`; 21ms
[2019-07-18 10:11:40.873] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/users
[2019-07-18 10:11:40.874] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getByParams
[2019-07-18 10:11:40.875] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.875] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `servicetype`; 6ms
[2019-07-18 10:11:40.876] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.876] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `status`; 6ms
[2019-07-18 10:11:40.877] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.878] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `ordertype`; 7ms
[2019-07-18 10:11:40.881] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 469028310
[2019-07-18 10:11:40.883] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.883] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `devices`; 10ms
[2019-07-18 10:11:40.884] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.884] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `vendors`; 11ms
[2019-07-18 10:11:40.885] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 2129809734
[2019-07-18 10:11:40.886] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 832200969
[2019-07-18 10:11:40.887] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 797875960
[2019-07-18 10:11:40.890] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 3672458130
[2019-07-18 10:11:40.891] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 1168970086
[2019-07-18 10:11:40.894] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.895] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `users` AS `user` WHERE `user`.`blocked` = 0 AND `user`.`name` != 'Administrator' ORDER BY `user`.`name`; 14ms
[2019-07-18 10:11:40.898] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.899] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `ordertype` AS `type` WHERE 1=1 ORDER BY `type`.`name`; 9ms
[2019-07-18 10:11:40.902] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/users 200 29ms 11.29kb
[2019-07-18 10:11:40.904] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.905] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `servicetype` AS `serviceType` WHERE 1=1 ORDER BY `serviceType`.`name`; 15ms
[2019-07-18 10:11:40.925] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.926] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `city` AS `city` WHERE 1=1 ORDER BY `city`.`name`; 40ms
[2019-07-18 10:11:40.928] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/types?checksum=0 200 59ms 674b
[2019-07-18 10:11:40.932] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.934] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `status` AS `status` WHERE 1=1 ORDER BY `status`.`name`; 42ms
[2019-07-18 10:11:40.942] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.942] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name`, `parent_id` AS `parentId`, `vendor_id` AS `vendorId` FROM `devices` AS `device` WHERE 1=1 ORDER BY `device`.`name`; 44ms
[2019-07-18 10:11:40.944] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:40.944] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `vendors` AS `vendor` WHERE 1=1 ORDER BY `vendor`.`name`; 43ms
[2019-07-18 10:11:40.953] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/service-types?checksum=0 200 102ms 692b
[2019-07-18 10:11:40.954] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/cities?checksum=0 200 105ms 1.13kb
[2019-07-18 10:11:40.966] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/statuses?checksum=0 200 113ms 1.28kb
[2019-07-18 10:11:40.988] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/devices?checksum=0 200 118ms 34.54kb
[2019-07-18 10:11:40.994] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/vendors?checksum=0 200 123ms 1.66kb
[2019-07-18 10:11:41.126] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1
[2019-07-18 10:11:41.127] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 10:11:41.128] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 10:11:41.136] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:41.136] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 7ms
[2019-07-18 10:11:41.137] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 10:11:41.138] [Level { level: 20000, levelStr: 'INFO' }] [default] - getAll_DualSearch
[2019-07-18 10:11:41.138] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true },
    { as: 'performer', model: [Function] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { attributes: [], model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] },
    { include: [Array], separate: true, model: [Function] },
    {
      include: [Array],
      as: 'history',
      separate: true,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ]
  ]
}
[2019-07-18 10:11:41.156] [Level { level: 20000, levelStr: 'INFO' }] [default] - getSearch...
[2019-07-18 10:11:41.161] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [Object: null prototype] {
  fields: '{"customer":["id","name"],"equipment":["id","endWarrantyDate","id","endCBSWarrantyDate","id","serialNumber","id","regNumber","id","bnaFlag"],"equipmentType":["id","name","model"],"performer":["id","name"],"ticket":["id","vendorId","typeId","number","serviceTypeId","date","warrantyFlag","cbsWarrantyFlag","commonFieldString","statusId","cityId","subcontractorFlag","reasonDescription"],"timeout":["timeout"]}',
  filters: '{"ticket":{"statusId":{"$in":[1,3,4,5,6,15,18,20,21,22,24,25,26,27,29,30,31]},"date":{"$between":["2000-01-01","2019-07-18"]}},"equipment":{},"timeout":{}}',
  sort: '{"ticket":{"date":"desc"}}',
  limit: '[100,0]',
  count: 'true',
  userId: '1'
}
[2019-07-18 10:11:41.189] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - fastSearch:  {
  limit: [ 100, 0 ],
  sort: { models: [ 'ticket' ], ticket: { date: 'desc' } },
  filters: {
    models: [ 'ticket', 'equipment', 'timeout' ],
    timeout: {},
    equipment: {},
    ticket: { date: [Object], statusId: [Object] }
  },
  fields: {
    models: [
      'customer',
      'equipment',
      'equipmentType',
      'performer',
      'ticket',
      'timeout'
    ],
    timeout: [ 'timeout' ],
    ticket: [
      'id',
      'vendorId',
      'typeId',
      'number',
      'serviceTypeId',
      'date',
      'warrantyFlag',
      'cbsWarrantyFlag',
      'commonFieldString',
      'statusId',
      'cityId',
      'subcontractorFlag',
      'reasonDescription'
    ],
    performer: [ 'id', 'name' ],
    equipmentType: [ 'id', 'name', 'model' ],
    equipment: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ],
    customer: [ 'id', 'name' ]
  }
}
[2019-07-18 10:11:41.191] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 10:11:41.192] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  limit: [ 100, 0 ],
  sort: { models: [ 'ticket' ], ticket: { date: 'desc' } },
  filters: {
    models: [ 'ticket', 'equipment', 'timeout' ],
    timeout: {},
    equipment: {},
    ticket: { date: [Object], statusId: [Object] }
  },
  fields: { models: [ 'ticket' ], ticket: [ 'id' ] },
  checkedModels: [],
  order: []
}
[2019-07-18 10:11:41.192] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters {
  models: [ 'ticket', 'equipment', 'timeout' ],
  timeout: {},
  equipment: {},
  ticket: { date: { '$between': [Array] }, statusId: { '$in': [Array] } }
}
[2019-07-18 10:11:41.193] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  date ticket
[2019-07-18 10:11:41.193] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters {
  models: [ 'ticket', 'equipment', 'timeout' ],
  timeout: {},
  equipment: {},
  ticket: { date: { '$between': [Array] }, statusId: { '$in': [Array] } }
}
[2019-07-18 10:11:41.194] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  statusId ticket
[2019-07-18 10:11:41.195] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  [ [ [ 'date', 'desc' ] ] ]
[2019-07-18 10:11:41.196] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket', 'ticket', 'ticket' ]
[2019-07-18 10:11:41.197] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 10:11:41.197] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"limit":[100,0],"sort":{"models":["ticket"],"ticket":{"date":"desc"}},"filters":{"models":["ticket","equipment","timeout"],"timeout":{},"equipment":{},"ticket":{"date":{"$between":["2000-01-01","2019-07-18"]},"statusId":{"$in":[1,3,4,5,6,15,18,20,21,22,24,25,26,27,29,30,31]}}},"fields":{"models":["ticket"],"ticket":["id"]},"checkedModels":["ticket","ticket","ticket"],"order":[[["date","desc"]]]}
[2019-07-18 10:11:41.198] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 10:11:41.198] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  []
[2019-07-18 10:11:41.198] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [],
  attributes: [ 'id' ],
  where: { date: { '$between': [Array] }, statusId: { '$in': [Array] } },
  order: [ [ 'date', 'desc' ] ],
  limit: 100,
  offset: 0
}
[2019-07-18 10:11:41.235] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:41.235] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id` FROM `orders` AS `ticket` WHERE `ticket`.`orderdate` BETWEEN '2000-01-01' AND '2019-07-18' AND `ticket`.`statusid` IN (1, 3, 4, 5, 6, 15, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31) ORDER BY `ticket`.`orderdate` DESC LIMIT 0, 100; 21ms
[2019-07-18 10:11:41.277] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:41.277] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT count(`ticket`.`id`) AS `count` FROM `orders` AS `ticket` WHERE `ticket`.`orderdate` BETWEEN '2000-01-01' AND '2019-07-18' AND `ticket`.`statusid` IN (1, 3, 4, 5, 6, 15, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31); 65ms
[2019-07-18 10:11:41.278] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - _tickets: [
  { id: 497078 }, { id: 497077 }, { id: 497076 }, { id: 497075 },
  { id: 497074 }, { id: 497073 }, { id: 497072 }, { id: 497071 },
  { id: 497070 }, { id: 497069 }, { id: 497068 }, { id: 497067 },
  { id: 497066 }, { id: 497065 }, { id: 497064 }, { id: 497063 },
  { id: 497062 }, { id: 497061 }, { id: 497060 }, { id: 497059 },
  { id: 497058 }, { id: 497057 }, { id: 497056 }, { id: 497055 },
  { id: 497054 }, { id: 497053 }, { id: 497052 }, { id: 497051 },
  { id: 497050 }, { id: 497049 }, { id: 497048 }, { id: 497047 },
  { id: 497046 }, { id: 497045 }, { id: 497044 }, { id: 497043 },
  { id: 497042 }, { id: 497041 }, { id: 497040 }, { id: 497039 },
  { id: 497038 }, { id: 497037 }, { id: 497036 }, { id: 497035 },
  { id: 497034 }, { id: 497033 }, { id: 497032 }, { id: 497031 },
  { id: 497030 }, { id: 497029 }, { id: 497028 }, { id: 497027 },
  { id: 497026 }, { id: 497025 }, { id: 497023 }, { id: 497022 },
  { id: 497021 }, { id: 497020 }, { id: 497019 }, { id: 497018 },
  { id: 497017 }, { id: 497015 }, { id: 497014 }, { id: 497013 },
  { id: 497012 }, { id: 497011 }, { id: 497010 }, { id: 497009 },
  { id: 497008 }, { id: 497007 }, { id: 497006 }, { id: 497004 },
  { id: 497003 }, { id: 497002 }, { id: 497001 }, { id: 497000 },
  { id: 496999 }, { id: 496998 }, { id: 496997 }, { id: 496996 },
  { id: 496995 }, { id: 496994 }, { id: 496993 }, { id: 496992 },
  { id: 496991 }, { id: 496990 }, { id: 496989 }, { id: 496988 },
  { id: 496987 }, { id: 496986 }, { id: 496984 }, { id: 496983 },
  { id: 496982 }, { id: 496981 }, { id: 496979 }, { id: 496977 },
  { id: 496976 }, { id: 496975 }, { id: 496974 }, { id: 496972 }
]
[2019-07-18 10:11:41.300] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.prepareSearch
[2019-07-18 10:11:41.301] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - searchObj:  {
  fields: {
    customer: [ 'id', 'name' ],
    equipment: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ],
    equipmentType: [ 'id', 'name', 'model' ],
    performer: [ 'id', 'name' ],
    ticket: [
      'id',
      'vendorId',
      'typeId',
      'number',
      'serviceTypeId',
      'date',
      'warrantyFlag',
      'cbsWarrantyFlag',
      'commonFieldString',
      'statusId',
      'cityId',
      'subcontractorFlag',
      'reasonDescription'
    ],
    timeout: [ 'timeout' ],
    models: [
      'customer',
      'equipment',
      'equipmentType',
      'performer',
      'ticket',
      'timeout'
    ]
  },
  filters: { models: [ 'ticket' ], ticket: { id: [Object] } },
  sort: { ticket: { date: 'desc' }, models: [ 'ticket' ] },
  checkedModels: [],
  order: []
}
[2019-07-18 10:11:41.302] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.filters { models: [ 'ticket' ], ticket: { id: { '$in': [Array] } } }
[2019-07-18 10:11:41.303] [Level { level: 20000, levelStr: 'INFO' }] [default] - checkKey:  id ticket
[2019-07-18 10:11:41.304] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search.order:  [ [ [ 'date', 'desc' ] ] ]
[2019-07-18 10:11:41.304] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkedModels:  [ 'ticket', 'ticket' ]
[2019-07-18 10:11:41.305] [Level { level: 20000, levelStr: 'INFO' }] [default] - deleteUnnecessaryIncludes:
[2019-07-18 10:11:41.305] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - search:  {"fields":{"customer":["id","name"],"equipment":["id","endWarrantyDate","id","endCBSWarrantyDate","id","serialNumber","id","regNumber","id","bnaFlag"],"equipmentType":["id","name","model"],"performer":["id","name"],"ticket":["id","vendorId","typeId","number","serviceTypeId","date","warrantyFlag","cbsWarrantyFlag","commonFieldString","statusId","cityId","subcontractorFlag","reasonDescription"],"timeout":["timeout"],"models":["customer","equipment","equipmentType","performer","ticket","timeout"]},"filters":{"models":["ticket"],"ticket":{"id":{"$in":[497078,497077,497076,497075,497074,497073,497072,497071,497070,497069,497068,497067,497066,497065,497064,497063,497062,497061,497060,497059,497058,497057,497056,497055,497054,497053,497052,497051,497050,497049,497048,497047,497046,497045,497044,497043,497042,497041,497040,497039,497038,497037,497036,497035,497034,497033,497032,497031,497030,497029,497028,497027,497026,497025,497023,497022,497021,497020,497019,497018,497017,497015,497014,497013,497012,497011,497010,497009,497008,497007,497006,497004,497003,497002,497001,497000,496999,496998,496997,496996,496995,496994,496993,496992,496991,496990,496989,496988,496987,496986,496984,496983,496982,496981,496979,496977,496976,496975,496974,496972]}}},"sort":{"ticket":{"date":"desc"},"models":["ticket"]},"checkedModels":["ticket","ticket"],"order":[[["date","desc"]]]}
[2019-07-18 10:11:41.306] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - [ 'ticket' ]
[2019-07-18 10:11:41.307] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - include:  [
  {
    model: [Function: status] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'status',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: {},
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getNextStatus: [Function]
    },
    required: true,
    attributes: []
  },
  {
    as: 'performer',
    model: [Function: user] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'users',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [Array],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: true,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      RoleValues: [Object],
      getUserRole: [AsyncFunction],
      getUserRoleId: [AsyncFunction],
      autorize: [AsyncFunction],
      getByParams: [AsyncFunction]
    },
    attributes: [ 'id', 'name' ]
  },
  {
    include: { attributes: [Array], model: [Function] },
    model: [Function: equipment] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'equipment',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      myAssociations: [Array]
    },
    attributes: [
      'id',
      'endWarrantyDate',
      'id',
      'endCBSWarrantyDate',
      'id',
      'serialNumber',
      'id',
      'regNumber',
      'id',
      'bnaFlag'
    ]
  },
  {
    model: [Function: customer] {
      sequelize: [Sequelize],
      options: [Object],
      associations: {},
      underscored: undefined,
      tableName: 'customers',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: {},
      _dataTypeSanitizers: {},
      _booleanAttributes: [],
      _dateAttributes: [],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: false,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'id',
      primaryKeyField: 'id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: 'id',
      _scope: {},
      _scopeNames: [Array],
      Values: [Object],
      getByName: [Function]
    },
    attributes: [ 'id', 'name' ]
  },
  {
    include: { model: [Function], attributes: [] },
    where: { activeFlag: 1 },
    required: false,
    model: [Function: timeout] {
      sequelize: [Sequelize],
      options: [Object],
      associations: [Object],
      underscored: undefined,
      tableName: 'order_timeout',
      _schema: null,
      _schemaDelimiter: '',
      rawAttributes: [Object],
      primaryKeys: [Object],
      _timestampAttributes: {},
      _readOnlyAttributes: [],
      _hasReadOnlyAttributes: 0,
      _isReadOnlyAttribute: [Function],
      _dataTypeChanges: [Object],
      _dataTypeSanitizers: [Object],
      _booleanAttributes: [],
      _dateAttributes: [Array],
      _hstoreAttributes: [],
      _rangeAttributes: [],
      _jsonAttributes: [],
      _geometryAttributes: [],
      _virtualAttributes: [],
      _defaultValues: [Object],
      fieldRawAttributesMap: [Object],
      fieldAttributeMap: [Object],
      uniqueKeys: {},
      _hasBooleanAttributes: false,
      _isBooleanAttribute: [Function],
      _hasDateAttributes: true,
      _isDateAttribute: [Function],
      _hasHstoreAttributes: false,
      _isHstoreAttribute: [Function],
      _hasRangeAttributes: false,
      _isRangeAttribute: [Function],
      _hasJsonAttributes: false,
      _isJsonAttribute: [Function],
      _hasVirtualAttributes: false,
      _isVirtualAttribute: [Function],
      _hasGeometryAttributes: false,
      _isGeometryAttribute: [Function],
      _hasDefaultValues: true,
      attributes: [Object],
      tableAttributes: [Object],
      primaryKeyAttributes: [Array],
      primaryKeyAttribute: 'ticketId',
      primaryKeyField: 'order_id',
      _hasPrimaryKeys: true,
      _isPrimaryKey: [Function],
      autoIncrementAttribute: null,
      _scope: {},
      _scopeNames: [Array],
      transactionCreateTimeout: [AsyncFunction],
      create: [Function],
      getAll: [AsyncFunction],
      deactivate: [Function],
      myAssociations: [Array]
    },
    attributes: [ 'timeout' ]
  }
]
[2019-07-18 10:11:41.317] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params:  {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true, attributes: [] },
    { as: 'performer', model: [Function], attributes: [Array] },
    { include: [Object], model: [Function], attributes: [Array] },
    { model: [Function], attributes: [Array] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function],
      attributes: [Array]
    }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ],
    'id',
    'vendorId',
    'typeId',
    'number',
    'serviceTypeId',
    'date',
    'warrantyFlag',
    'cbsWarrantyFlag',
    'commonFieldString',
    'statusId',
    'cityId',
    'subcontractorFlag',
    'reasonDescription'
  ],
  where: { id: { '$in': [Array] } },
  order: [ [ 'date', 'desc' ] ]
}
[2019-07-18 10:11:41.374] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:11:41.374] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT IF(`status`.`final` = 1, 0, IF(7 < 4, IF(`ticket`.`performerid` != 1, 0, IF(`ticket`.`statusid` = 22, 1, 0)), IF(`ticket`.`statusid` IN(1, 3, 5, 22), 1, 0))) AS `perm--serviceType`, IF(`status`.`final` = 1, 0, IF(7 < 4, 0, IF(`ticket`.`statusid` IN(1, 3, 4, 5, 6, 22), 1, 0))) AS `perm--setPerformer`, IF(`status`.`final` = 1, 0, IF(7 = -1, 1, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--comment`, IF(`status`.`final` = 1, 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0))) AS `perm--status`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, 1, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--needPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--addition`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(3, 5, 6), 0, IF(7 < 5, 0, IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--partOrder--generalPart--editing`, IF(`status`.`final` = 1, 0, IF(`ticket`.`ordertypeid` NOT IN(1, 4, 2), 0, IF(7 > 3, IF(7 IN(5, 6), 0, 1), IF(`ticket`.`performerid` = 1, 1, 0)))) AS `perm--instPart--addition`, `ticket`.`id`, `ticket`.`vendorid` AS `vendorId`, `ticket`.`ordertypeid` AS `typeId`, `ticket`.`ordernumber` AS `number`, `ticket`.`servicetypeid` AS `serviceTypeId`, `ticket`.`orderdate` AS `date`, `ticket`.`warranty` AS `warrantyFlag`, `ticket`.`cbswarranty` AS `cbsWarrantyFlag`, `ticket`.`sordernumber` AS `commonFieldString`, `ticket`.`statusid` AS `statusId`, `ticket`.`cityid` AS `cityId`, `ticket`.`subcontractor` AS `subcontractorFlag`, `ticket`.`reason_description` AS `reasonDescription`, `performer`.`id` AS `performer.id`, `performer`.`name` AS `performer.name`, `equipment`.`id` AS `equipment.id`, `equipment`.`endwarrantydate` AS `equipment.endWarrantyDate`, `equipment`.`id` AS `equipment.id`, `equipment`.`endcbswarrantydate` AS `equipment.endCBSWarrantyDate`, `equipment`.`id` AS `equipment.id`, `equipment`.`serialnumber` AS `equipment.serialNumber`, `equipment`.`id` AS `equipment.id`, `equipment`.`regnumber` AS `equipment.regNumber`, `equipment`.`id` AS `equipment.id`, `equipment`.`bna` AS `equipment.bnaFlag`, `equipment->equipmentType`.`id` AS `equipment.equipmentType.id`, `equipment->equipmentType`.`name` AS `equipment.equipmentType.name`, `equipment->equipmentType`.`typemodel` AS `equipment.equipmentType.model`, `customer`.`id` AS `customer.id`, `customer`.`name` AS `customer.name`, `timeout`.`reason_id` AS `timeout.reasonId`, `timeout`.`order_id` AS `timeout.ticketId`, `timeout`.`timeout` AS `timeout.timeout` FROM `orders` AS `ticket` INNER JOIN `status` AS `status` ON `ticket`.`statusid` = `status`.`id` LEFT OUTER JOIN `users` AS `performer` ON `ticket`.`performerid` = `performer`.`id` LEFT OUTER JOIN `equipment` AS `equipment` ON `ticket`.`equipmentid` = `equipment`.`id` LEFT OUTER JOIN `equipmenttypes` AS `equipment->equipmentType` ON `equipment`.`typemodelid` = `equipment->equipmentType`.`id` LEFT OUTER JOIN `customers` AS `customer` ON `ticket`.`customerid` = `customer`.`id` LEFT OUTER JOIN `order_timeout` AS `timeout` ON `ticket`.`id` = `timeout`.`order_id` AND `timeout`.`active` = 1 LEFT OUTER JOIN `order_timeout_reason` AS `timeout->timeoutReason` ON `timeout`.`reason_id` = `timeout->timeoutReason`.`id` WHERE `ticket`.`id` IN (497078, 497077, 497076, 497075, 497074, 497073, 497072, 497071, 497070, 497069, 497068, 497067, 497066, 497065, 497064, 497063, 497062, 497061, 497060, 497059, 497058, 497057, 497056, 497055, 497054, 497053, 497052, 497051, 497050, 497049, 497048, 497047, 497046, 497045, 497044, 497043, 497042, 497041, 497040, 497039, 497038, 497037, 497036, 497035, 497034, 497033, 497032, 497031, 497030, 497029, 497028, 497027, 497026, 497025, 497023, 497022, 497021, 497020, 497019, 497018, 497017, 497015, 497014, 497013, 497012, 497011, 497010, 497009, 497008, 497007, 497006, 497004, 497003, 497002, 497001, 497000, 496999, 496998, 496997, 496996, 496995, 496994, 496993, 496992, 496991, 496990, 496989, 496988, 496987, 496986, 496984, 496983, 496982, 496981, 496979, 496977, 496976, 496975, 496974, 496972) ORDER BY `ticket`.`orderdate` DESC; 31ms
[2019-07-18 10:11:41.408] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1 200 282ms 121.28kb
[2019-07-18 10:12:45.062] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/cities?checksum=0
[2019-07-18 10:12:45.065] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/service-types?checksum=0
[2019-07-18 10:12:45.072] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/statuses?checksum=0
[2019-07-18 10:12:45.091] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/types?checksum=0
[2019-07-18 10:12:45.092] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/vendors?checksum=0
[2019-07-18 10:12:45.093] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/devices?checksum=0
[2019-07-18 10:12:45.097] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/users
[2019-07-18 10:12:45.099] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getByParams
[2019-07-18 10:12:45.108] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.108] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `city`; 1ms
[2019-07-18 10:12:45.109] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.112] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `servicetype`; 2ms
[2019-07-18 10:12:45.114] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 469028310
[2019-07-18 10:12:45.116] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.118] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `status`; 7ms
[2019-07-18 10:12:45.120] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 2129809734
[2019-07-18 10:12:45.121] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.122] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `ordertype`; 7ms
[2019-07-18 10:12:45.124] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 832200969
[2019-07-18 10:12:45.125] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.125] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `vendors`; 5ms
[2019-07-18 10:12:45.127] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 797875960
[2019-07-18 10:12:45.128] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.148] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): CHECKSUM TABLE `devices`; 5ms
[2019-07-18 10:12:45.150] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 1168970086
[2019-07-18 10:12:45.153] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.155] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `users` AS `user` WHERE `user`.`blocked` = 0 AND `user`.`name` != 'Administrator' ORDER BY `user`.`name`; 27ms
[2019-07-18 10:12:45.182] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - checkSum: 3672458130
[2019-07-18 10:12:45.222] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.247] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `city` AS `city` WHERE 1=1 ORDER BY `city`.`name`; 72ms
[2019-07-18 10:12:45.257] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/users 200 159ms 11.29kb
[2019-07-18 10:12:45.276] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.277] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `servicetype` AS `serviceType` WHERE 1=1 ORDER BY `serviceType`.`name`; 104ms
[2019-07-18 10:12:45.296] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.337] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `status` AS `status` WHERE 1=1 ORDER BY `status`.`name`; 123ms
[2019-07-18 10:12:45.353] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.357] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `ordertype` AS `type` WHERE 1=1 ORDER BY `type`.`name`; 179ms
[2019-07-18 10:12:45.407] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.455] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name` FROM `vendors` AS `vendor` WHERE 1=1 ORDER BY `vendor`.`name`; 232ms
[2019-07-18 10:12:45.471] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/cities?checksum=0 200 409ms 1.13kb
[2019-07-18 10:12:45.485] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.486] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT `id`, `name`, `parent_id` AS `parentId`, `vendor_id` AS `vendorId` FROM `devices` AS `device` WHERE 1=1 ORDER BY `device`.`name`; 231ms
[2019-07-18 10:12:45.496] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/service-types?checksum=0 200 431ms 692b
[2019-07-18 10:12:45.498] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/statuses?checksum=0 200 426ms 1.28kb
[2019-07-18 10:12:45.506] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/types?checksum=0 200 414ms 674b
[2019-07-18 10:12:45.506] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/vendors?checksum=0 200 414ms 1.66kb
[2019-07-18 10:12:45.512] [Level { level: 20000, levelStr: 'INFO' }] [default] -   <-- GET /api/v1/devices?checksum=0 200 419ms 34.54kb
[2019-07-18 10:12:45.585] [Level { level: 20000, levelStr: 'INFO' }] [default] -   --> GET /api/v1/tickets?fields=%7B%22customer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22equipment%22%3A%5B%22id%22%2C%22endWarrantyDate%22%2C%22id%22%2C%22endCBSWarrantyDate%22%2C%22id%22%2C%22serialNumber%22%2C%22id%22%2C%22regNumber%22%2C%22id%22%2C%22bnaFlag%22%5D%2C%22equipmentType%22%3A%5B%22id%22%2C%22name%22%2C%22model%22%5D%2C%22performer%22%3A%5B%22id%22%2C%22name%22%5D%2C%22ticket%22%3A%5B%22id%22%2C%22vendorId%22%2C%22typeId%22%2C%22number%22%2C%22serviceTypeId%22%2C%22date%22%2C%22warrantyFlag%22%2C%22cbsWarrantyFlag%22%2C%22commonFieldString%22%2C%22statusId%22%2C%22cityId%22%2C%22subcontractorFlag%22%2C%22reasonDescription%22%5D%2C%22timeout%22%3A%5B%22timeout%22%5D%7D&filters=%7B%22ticket%22%3A%7B%22statusId%22%3A%7B%22%24in%22%3A%5B1%2C3%2C4%2C5%2C6%2C15%2C18%2C20%2C21%2C22%2C24%2C25%2C26%2C27%2C29%2C30%2C31%5D%7D%2C%22date%22%3A%7B%22%24between%22%3A%5B%222000-01-01%22%2C%222019-07-18%22%5D%7D%7D%2C%22equipment%22%3A%7B%7D%2C%22timeout%22%3A%7B%7D%7D&sort=%7B%22ticket%22%3A%7B%22date%22%3A%22desc%22%7D%7D&limit=%5B100%2C0%5D&count=true&userId=1
[2019-07-18 10:12:45.589] [Level { level: 20000, levelStr: 'INFO' }] [default] - Ticket.getParams
[2019-07-18 10:12:45.590] [Level { level: 20000, levelStr: 'INFO' }] [default] - User.getUserRole
[2019-07-18 10:12:45.621] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Sequelize logging:
[2019-07-18 10:12:45.621] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - Executed (default): SELECT
    MAX(g.weight) `role`
FROM groups g
INNER JOIN users u ON u.id = '1'
WHERE
    g.weight < 8 
    AND u.blocked = 0
    AND FIND_IN_SET('1', g.userslist) > 0
; 10ms
[2019-07-18 10:12:45.622] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - role: 7
[2019-07-18 10:12:45.625] [Level { level: 20000, levelStr: 'INFO' }] [default] - getAll_DualSearch
[2019-07-18 10:12:45.625] [Level { level: 10000, levelStr: 'DEBUG' }] [default] - params {
  raw: true,
  model: [Function: ticket] {
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MysqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: [Object],
      test: [Object]
    },
    options: {
      timestamps: false,
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: [Object],
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      indexes: [],
      name: [Object],
      omitNull: false,
      tableName: 'orders',
      sequelize: [Sequelize],
      hooks: {},
      uniqueKeys: {}
    },
    associations: {
      status: [BelongsTo],
      performer: [BelongsTo],
      city: [BelongsTo],
      equipment: [BelongsTo],
      customer: [BelongsTo],
      customerPerson: [BelongsTo],
      serviceType: [BelongsTo],
      vendor: [BelongsTo],
      seller: [BelongsTo],
      sellerPerson: [BelongsTo],
      contract: [BelongsTo],
      supplier: [BelongsTo],
      reason: [BelongsTo],
      timeout: [BelongsTo],
      generalParts: [HasMany],
      needParts: [HasMany],
      instParts: [HasMany],
      comments: [HasMany],
      history: [HasMany]
    },
    underscored: undefined,
    tableName: 'orders',
    _schema: null,
    _schemaDelimiter: '',
    rawAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    primaryKeys: { id: [Object] },
    _timestampAttributes: {},
    _readOnlyAttributes: [],
    _hasReadOnlyAttributes: 0,
    _isReadOnlyAttribute: [Function: memoized] { cache: [MapCache] },
    _dataTypeChanges: {
      invoiceDate: [Function: _isChanged],
      date: [Function: _isChanged],
      billDate: [Function: _isChanged]
    },
    _dataTypeSanitizers: {
      invoiceDate: [Function: _sanitize],
      date: [Function: _sanitize],
      billDate: [Function: _sanitize]
    },
    _booleanAttributes: [],
    _dateAttributes: [ 'invoiceDate', 'date', 'billDate' ],
    _hstoreAttributes: [],
    _rangeAttributes: [],
    _jsonAttributes: [],
    _geometryAttributes: [],
    _virtualAttributes: [ 'perm' ],
    _defaultValues: {
      parentId: [Function: wrapper],
      sellerId: [Function: wrapper],
      sellerPersonId: [Function: wrapper],
      invoiceDate: [Function: wrapper],
      numberFromCustomer: [Function: wrapper],
      customerPersonId: [Function: wrapper],
      contractId: [Function: wrapper],
      equipmentId: [Function: wrapper],
      partName: [Function: wrapper],
      partNumber: [Function: wrapper],
      serialNumber: [Function: wrapper],
      blockNumber: [Function: wrapper],
      warrantyFlag: [Function: wrapper],
      cbsWarrantyFlag: [Function: wrapper],
      commonFieldString: [Function: wrapper],
      equipSupplierId: [Function: wrapper],
      description: [Function: wrapper],
      performerId: [Function: wrapper],
      billNumber: [Function: wrapper],
      billDate: [Function: wrapper],
      onceFlag: [Function: wrapper],
      checkedFlag: [Function: wrapper],
      paidFlag: [Function: wrapper],
      subcontractorFlag: [Function: wrapper],
      retryFlag: [Function: wrapper],
      archivedFlag: [Function: wrapper],
      frozenFlag: [Function: wrapper],
      failDescription: [Function: wrapper],
      repairPrice: [Function: wrapper],
      diagPrice: [Function: wrapper],
      reasonId: [Function: wrapper],
      reasonDescription: [Function: wrapper],
      hash: [Function: wrapper],
      detailsHash: [Function: wrapper]
    },
    fieldRawAttributesMap: {
      id: [Object],
      parentorderid: [Object],
      ordertypeid: [Object],
      statusid: [Object],
      seller_id: [Object],
      seller_cperson_id: [Object],
      ordernumber: [Object],
      invoicedate: [Object],
      onbycustomer: [Object],
      orderdate: [Object],
      cityid: [Object],
      customerid: [Object],
      cpersonid: [Object],
      contractid: [Object],
      vendorid: [Object],
      equipmentid: [Object],
      partname: [Object],
      partnumber: [Object],
      serialnumber: [Object],
      blocknumber: [Object],
      warranty: [Object],
      cbswarranty: [Object],
      sordernumber: [Object],
      equipsupplierid: [Object],
      servicetypeid: [Object],
      description: [Object],
      ownerid: [Object],
      performerid: [Object],
      billnumber: [Object],
      billdate: [Object],
      once: [Object],
      checked: [Object],
      paid_by_customer: [Object],
      subcontractor: [Object],
      retry: [Object],
      archived: [Object],
      frozen: [Object],
      fail_description: [Object],
      price: [Object],
      diagnostics: [Object],
      reason_id: [Object],
      reason_description: [Object],
      hash: [Object],
      details_hash: [Object],
      perm: [Object]
    },
    fieldAttributeMap: {
      parentorderid: 'parentId',
      ordertypeid: 'typeId',
      statusid: 'statusId',
      seller_id: 'sellerId',
      seller_cperson_id: 'sellerPersonId',
      ordernumber: 'number',
      invoicedate: 'invoiceDate',
      onbycustomer: 'numberFromCustomer',
      orderdate: 'date',
      cityid: 'cityId',
      customerid: 'customerId',
      cpersonid: 'customerPersonId',
      contractid: 'contractId',
      vendorid: 'vendorId',
      equipmentid: 'equipmentId',
      partname: 'partName',
      partnumber: 'partNumber',
      serialnumber: 'serialNumber',
      blocknumber: 'blockNumber',
      warranty: 'warrantyFlag',
      cbswarranty: 'cbsWarrantyFlag',
      sordernumber: 'commonFieldString',
      equipsupplierid: 'equipSupplierId',
      servicetypeid: 'serviceTypeId',
      ownerid: 'ownerId',
      performerid: 'performerId',
      billnumber: 'billNumber',
      billdate: 'billDate',
      once: 'onceFlag',
      checked: 'checkedFlag',
      paid_by_customer: 'paidFlag',
      subcontractor: 'subcontractorFlag',
      retry: 'retryFlag',
      archived: 'archivedFlag',
      frozen: 'frozenFlag',
      fail_description: 'failDescription',
      price: 'repairPrice',
      diagnostics: 'diagPrice',
      reason_id: 'reasonId',
      reason_description: 'reasonDescription',
      details_hash: 'detailsHash'
    },
    uniqueKeys: {},
    _hasBooleanAttributes: false,
    _isBooleanAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDateAttributes: true,
    _isDateAttribute: [Function: memoized] { cache: [MapCache] },
    _hasHstoreAttributes: false,
    _isHstoreAttribute: [Function: memoized] { cache: [MapCache] },
    _hasRangeAttributes: false,
    _isRangeAttribute: [Function: memoized] { cache: [MapCache] },
    _hasJsonAttributes: false,
    _isJsonAttribute: [Function: memoized] { cache: [MapCache] },
    _hasVirtualAttributes: true,
    _isVirtualAttribute: [Function: memoized] { cache: [MapCache] },
    _hasGeometryAttributes: false,
    _isGeometryAttribute: [Function: memoized] { cache: [MapCache] },
    _hasDefaultValues: true,
    attributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object],
      perm: [Object]
    },
    tableAttributes: {
      id: [Object],
      parentId: [Object],
      typeId: [Object],
      statusId: [Object],
      sellerId: [Object],
      sellerPersonId: [Object],
      number: [Object],
      invoiceDate: [Object],
      numberFromCustomer: [Object],
      date: [Object],
      cityId: [Object],
      customerId: [Object],
      customerPersonId: [Object],
      contractId: [Object],
      vendorId: [Object],
      equipmentId: [Object],
      partName: [Object],
      partNumber: [Object],
      serialNumber: [Object],
      blockNumber: [Object],
      warrantyFlag: [Object],
      cbsWarrantyFlag: [Object],
      commonFieldString: [Object],
      equipSupplierId: [Object],
      serviceTypeId: [Object],
      description: [Object],
      ownerId: [Object],
      performerId: [Object],
      billNumber: [Object],
      billDate: [Object],
      onceFlag: [Object],
      checkedFlag: [Object],
      paidFlag: [Object],
      subcontractorFlag: [Object],
      retryFlag: [Object],
      archivedFlag: [Object],
      frozenFlag: [Object],
      failDescription: [Object],
      repairPrice: [Object],
      diagPrice: [Object],
      reasonId: [Object],
      reasonDescription: [Object],
      hash: [Object],
      detailsHash: [Object]
    },
    primaryKeyAttributes: [ 'id' ],
    primaryKeyAttribute: 'id',
    primaryKeyField: 'id',
    _hasPrimaryKeys: true,
    _isPrimaryKey: [Function: memoized] { cache: [MapCache] },
    autoIncrementAttribute: 'id',
    _scope: {},
    _scopeNames: [ 'defaultScope' ],
    myAssociations: [
           'status',      'performer',
             'city',      'equipment',
         'customer', 'customerPerson',
      'serviceType',         'vendor',
           'seller',   'sellerPerson',
         'contract',       'supplier',
           'reason',    'generalPart',
          'timeout',       'needPart',
         'instPart',        'history',
          'comment'
    ],
    getParams: [AsyncFunction],
    getTicketPerms: [AsyncFunction],
    getAll_SimpleSearch: [AsyncFunction],
    getAll_DualSearch: [AsyncFunction],
    getById: [AsyncFunction],
    tryChangeServiceType: [AsyncFunction],
    tryChangeStatus: [AsyncFunction],
    tryChangePerformer: [AsyncFunction],
    getTree: [AsyncFunction],
    transactionUpdateTicketStatus: [Function],
    transactionCreateTicket: [Function],
    transactionFindById: [Function],
    updateServiceType: [AsyncFunction]
  },
  include: [
    { model: [Function], required: true },
    { as: 'performer', model: [Function] },
    { model: [Function] },
    { include: [Object], model: [Function] },
    { model: [Function] },
    { as: 'customerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { as: 'seller', model: [Function] },
    { as: 'sellerPerson', model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { model: [Function] },
    { attributes: [], model: [Function] },
    {
      include: [Object],
      where: [Object],
      required: false,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] },
    { include: [Array], separate: true, model: [Function] },
    {
      include: [Array],
      as: 'history',
      separate: true,
      model: [Function]
    },
    { include: [Array], separate: true, model: [Function] }
  ],
  attributes: [
    [ [Fn], 'perm--serviceType' ],
    [ [Fn], 'perm--setPerformer' ],
    [ [Fn], 'perm--comment' ],
    [ [Fn], 'perm--status' ],
    [ [Fn], 'perm--partOrder--needPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--addition' ],
    [ [Fn], 'perm--partOrder--generalPart--editing' ],
    [ [Fn], 'perm--instPart--addition' ]
  ]
}
